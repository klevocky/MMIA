
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d0  080032d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080032d0  080032d0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d0  080032d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080032d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001dc  080034b4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080034b4  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007511  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001728  00000000  00000000  00027715  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  00029520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d141  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065ed  00000000  00000000  00036cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045bf4  00000000  00000000  0003d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e80  00000000  00000000  00082f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030f4 	.word	0x080030f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080030f4 	.word	0x080030f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	b29a      	uxth	r2, r3
 8000230:	2301      	movs	r3, #1
 8000232:	425b      	negs	r3, r3
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <_write+0x28>)
 8000238:	f001 fccc 	bl	8001bd4 <HAL_UART_Transmit>
 return n;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000038c 	.word	0x2000038c

0800024c <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	701a      	strb	r2, [r3, #0]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];

 if ((c >= 32)&&(c <= 126))
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b1f      	cmp	r3, #31
 800025e:	d912      	bls.n	8000286 <uart_byte_available+0x3a>
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b7e      	cmp	r3, #126	; 0x7e
 8000266:	d80e      	bhi.n	8000286 <uart_byte_available+0x3a>
 if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <uart_byte_available+0x6c>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2bff      	cmp	r3, #255	; 0xff
 800026e:	d80a      	bhi.n	8000286 <uart_byte_available+0x3a>
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <uart_byte_available+0x6c>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	b291      	uxth	r1, r2
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <uart_byte_available+0x6c>)
 800027a:	8011      	strh	r1, [r2, #0]
 800027c:	0019      	movs	r1, r3
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <uart_byte_available+0x70>)
 8000280:	1dfa      	adds	r2, r7, #7
 8000282:	7812      	ldrb	r2, [r2, #0]
 8000284:	545a      	strb	r2, [r3, r1]
 if (c == '\n' || c == '\r') {
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b0a      	cmp	r3, #10
 800028c:	d003      	beq.n	8000296 <uart_byte_available+0x4a>
 800028e:	1dfb      	adds	r3, r7, #7
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b0d      	cmp	r3, #13
 8000294:	d10c      	bne.n	80002b0 <uart_byte_available+0x64>
 data[cnt] = '\0';
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <uart_byte_available+0x6c>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	001a      	movs	r2, r3
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <uart_byte_available+0x70>)
 800029e:	2100      	movs	r1, #0
 80002a0:	5499      	strb	r1, [r3, r2]
 uart_process_command(data);
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <uart_byte_available+0x70>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f80b 	bl	80002c0 <uart_process_command>
 cnt = 0;
 80002aa:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <uart_byte_available+0x6c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	801a      	strh	r2, [r3, #0]
 }
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b002      	add	sp, #8
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000023a 	.word	0x2000023a
 80002bc:	2000023c 	.word	0x2000023c

080002c0 <uart_process_command>:
static void uart_process_command(char *cmd)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	char *token;
	token = strtok(cmd, " ");
 80002c8:	4a3f      	ldr	r2, [pc, #252]	; (80003c8 <uart_process_command+0x108>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 fa46 	bl	8002760 <strtok>
 80002d4:	0003      	movs	r3, r0
 80002d6:	60fb      	str	r3, [r7, #12]
	if (strcasecmp(token, "HELLO") == 0) {
 80002d8:	4a3c      	ldr	r2, [pc, #240]	; (80003cc <uart_process_command+0x10c>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	0011      	movs	r1, r2
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 fa20 	bl	8002724 <strcasecmp>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d104      	bne.n	80002f2 <uart_process_command+0x32>
	 printf("Komunikace OK\n");
 80002e8:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <uart_process_command+0x110>)
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 fa10 	bl	8002710 <puts>
		printf("Komunikace OK\n");
	}


//	printf("prijato: '%s'\n", data);
}
 80002f0:	e066      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'LED1 ON') == 0)
 80002f2:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <uart_process_command+0x114>)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 fa13 	bl	8002724 <strcasecmp>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d104      	bne.n	800030c <uart_process_command+0x4c>
		printf("Komunikace OK\n");
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <uart_process_command+0x110>)
 8000304:	0018      	movs	r0, r3
 8000306:	f002 fa03 	bl	8002710 <puts>
}
 800030a:	e059      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'LED1 OFF') == 0)
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <uart_process_command+0x118>)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	0011      	movs	r1, r2
 8000312:	0018      	movs	r0, r3
 8000314:	f002 fa06 	bl	8002724 <strcasecmp>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d104      	bne.n	8000326 <uart_process_command+0x66>
		printf("Komunikace OK\n");
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <uart_process_command+0x110>)
 800031e:	0018      	movs	r0, r3
 8000320:	f002 f9f6 	bl	8002710 <puts>
}
 8000324:	e04c      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'LED2 ON') == 0)
 8000326:	4a2d      	ldr	r2, [pc, #180]	; (80003dc <uart_process_command+0x11c>)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	0011      	movs	r1, r2
 800032c:	0018      	movs	r0, r3
 800032e:	f002 f9f9 	bl	8002724 <strcasecmp>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d104      	bne.n	8000340 <uart_process_command+0x80>
		printf("Komunikace OK\n");
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <uart_process_command+0x110>)
 8000338:	0018      	movs	r0, r3
 800033a:	f002 f9e9 	bl	8002710 <puts>
}
 800033e:	e03f      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'LED2 OFF') == 0)
 8000340:	4a25      	ldr	r2, [pc, #148]	; (80003d8 <uart_process_command+0x118>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	0011      	movs	r1, r2
 8000346:	0018      	movs	r0, r3
 8000348:	f002 f9ec 	bl	8002724 <strcasecmp>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d104      	bne.n	800035a <uart_process_command+0x9a>
		printf("Komunikace OK\n");
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <uart_process_command+0x110>)
 8000352:	0018      	movs	r0, r3
 8000354:	f002 f9dc 	bl	8002710 <puts>
}
 8000358:	e032      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'STATUS') == 0)
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <uart_process_command+0x120>)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f002 f9df 	bl	8002724 <strcasecmp>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d104      	bne.n	8000374 <uart_process_command+0xb4>
		printf("Komunikace OK\n");
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <uart_process_command+0x110>)
 800036c:	0018      	movs	r0, r3
 800036e:	f002 f9cf 	bl	8002710 <puts>
}
 8000372:	e025      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'READ adresa') == 0)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <uart_process_command+0x124>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	0011      	movs	r1, r2
 800037a:	0018      	movs	r0, r3
 800037c:	f002 f9d2 	bl	8002724 <strcasecmp>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d104      	bne.n	800038e <uart_process_command+0xce>
		printf("Komunikace OK\n");
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <uart_process_command+0x110>)
 8000386:	0018      	movs	r0, r3
 8000388:	f002 f9c2 	bl	8002710 <puts>
}
 800038c:	e018      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'WRITE adresa hodnota') == 0)
 800038e:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <uart_process_command+0x128>)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	0011      	movs	r1, r2
 8000394:	0018      	movs	r0, r3
 8000396:	f002 f9c5 	bl	8002724 <strcasecmp>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d104      	bne.n	80003a8 <uart_process_command+0xe8>
		printf("Komunikace OK\n");
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <uart_process_command+0x110>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 f9b5 	bl	8002710 <puts>
}
 80003a6:	e00b      	b.n	80003c0 <uart_process_command+0x100>
	else if (strcasecmp(token,'DUMP') == 0)
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <uart_process_command+0x12c>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 f9b8 	bl	8002724 <strcasecmp>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d103      	bne.n	80003c0 <uart_process_command+0x100>
		printf("Komunikace OK\n");
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <uart_process_command+0x110>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f002 f9a8 	bl	8002710 <puts>
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b004      	add	sp, #16
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0800310c 	.word	0x0800310c
 80003cc:	08003110 	.word	0x08003110
 80003d0:	08003118 	.word	0x08003118
 80003d4:	31204f4e 	.word	0x31204f4e
 80003d8:	204f4646 	.word	0x204f4646
 80003dc:	32204f4e 	.word	0x32204f4e
 80003e0:	41545553 	.word	0x41545553
 80003e4:	72657361 	.word	0x72657361
 80003e8:	6e6f7461 	.word	0x6e6f7461
 80003ec:	44554d50 	.word	0x44554d50

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 fac3 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f83b 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 f8d1 	bl	80005a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000402:	f000 f8b1 	bl	8000568 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000406:	f000 f87f 	bl	8000508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 800040a:	4916      	ldr	r1, [pc, #88]	; (8000464 <main+0x74>)
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <main+0x78>)
 800040e:	2240      	movs	r2, #64	; 0x40
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fc87 	bl	8001d24 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000416:	e019      	b.n	800044c <main+0x5c>
		 uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <main+0x7c>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	0019      	movs	r1, r3
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	4a10      	ldr	r2, [pc, #64]	; (8000464 <main+0x74>)
 8000424:	5c52      	ldrb	r2, [r2, r1]
 8000426:	701a      	strb	r2, [r3, #0]
		 if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <main+0x7c>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	b29b      	uxth	r3, r3
 800042e:	3301      	adds	r3, #1
 8000430:	b29b      	uxth	r3, r3
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <main+0x7c>)
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	8011      	strh	r1, [r2, #0]
 8000438:	2b3f      	cmp	r3, #63	; 0x3f
 800043a:	d902      	bls.n	8000442 <main+0x52>
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <main+0x7c>)
 800043e:	2200      	movs	r2, #0
 8000440:	801a      	strh	r2, [r3, #0]
		 uart_byte_available(b); // process every received byte with the RX state machine
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff ff00 	bl	800024c <uart_byte_available>
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <main+0x7c>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b29b      	uxth	r3, r3
 8000452:	0019      	movs	r1, r3
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <main+0x80>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	2240      	movs	r2, #64	; 0x40
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	4299      	cmp	r1, r3
 8000460:	d1da      	bne.n	8000418 <main+0x28>
  {
 8000462:	e7d8      	b.n	8000416 <main+0x26>
 8000464:	200001f8 	.word	0x200001f8
 8000468:	2000038c 	.word	0x2000038c
 800046c:	20000238 	.word	0x20000238
 8000470:	20000348 	.word	0x20000348

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b091      	sub	sp, #68	; 0x44
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	2410      	movs	r4, #16
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2330      	movs	r3, #48	; 0x30
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 f8db 	bl	8002640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	003b      	movs	r3, r7
 800048c:	0018      	movs	r0, r3
 800048e:	2310      	movs	r3, #16
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f002 f8d4 	bl	8002640 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000498:	0021      	movs	r1, r4
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2202      	movs	r2, #2
 800049e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2201      	movs	r2, #1
 80004a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2210      	movs	r2, #16
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2202      	movs	r2, #2
 80004b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	22a0      	movs	r2, #160	; 0xa0
 80004bc:	0392      	lsls	r2, r2, #14
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fec1 	bl	8001250 <HAL_RCC_OscConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004d2:	f000 f8d1 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	003b      	movs	r3, r7
 80004d8:	2207      	movs	r2, #7
 80004da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004dc:	003b      	movs	r3, r7
 80004de:	2202      	movs	r2, #2
 80004e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ee:	003b      	movs	r3, r7
 80004f0:	2101      	movs	r1, #1
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f9c8 	bl	8001888 <HAL_RCC_ClockConfig>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004fc:	f000 f8bc 	bl	8000678 <Error_Handler>
  }
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b011      	add	sp, #68	; 0x44
 8000506:	bd90      	pop	{r4, r7, pc}

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800050e:	4a15      	ldr	r2, [pc, #84]	; (8000564 <MX_USART2_UART_Init+0x5c>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000514:	2296      	movs	r2, #150	; 0x96
 8000516:	0212      	lsls	r2, r2, #8
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_USART2_UART_Init+0x58>)
 800054c:	0018      	movs	r0, r3
 800054e:	f001 faed 	bl	8001b2c <HAL_UART_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000556:	f000 f88f 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000038c 	.word	0x2000038c
 8000564:	40004400 	.word	0x40004400

08000568 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_DMA_Init+0x38>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_DMA_Init+0x38>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	615a      	str	r2, [r3, #20]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_DMA_Init+0x38>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	200b      	movs	r0, #11
 800058c:	f000 fb08 	bl	8000ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f000 fb1a 	bl	8000bca <HAL_NVIC_EnableIRQ>

}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b089      	sub	sp, #36	; 0x24
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	240c      	movs	r4, #12
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2314      	movs	r3, #20
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f002 f843 	bl	8002640 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_GPIO_Init+0xc8>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_GPIO_Init+0xc8>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0309      	lsls	r1, r1, #12
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_GPIO_Init+0xc8>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	031b      	lsls	r3, r3, #12
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_GPIO_Init+0xc8>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_GPIO_Init+0xc8>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	03c9      	lsls	r1, r1, #15
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_GPIO_Init+0xc8>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	03db      	lsls	r3, r3, #15
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_GPIO_Init+0xc8>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_GPIO_Init+0xc8>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0289      	lsls	r1, r1, #10
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_GPIO_Init+0xc8>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	029b      	lsls	r3, r3, #10
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800060e:	2390      	movs	r3, #144	; 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fdfc 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	0192      	lsls	r2, r2, #6
 8000622:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_GPIO_Init+0xcc>)
 8000628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000630:	193b      	adds	r3, r7, r4
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f000 fc7c 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800063c:	0021      	movs	r1, r4
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2220      	movs	r2, #32
 8000642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000656:	187a      	adds	r2, r7, r1
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fc68 	bl	8000f34 <HAL_GPIO_Init>

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b009      	add	sp, #36	; 0x24
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	10210000 	.word	0x10210000
 8000674:	48000800 	.word	0x48000800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	619a      	str	r2, [r3, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69da      	ldr	r2, [r3, #28]
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0549      	lsls	r1, r1, #21
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_MspInit+0x44>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	055b      	lsls	r3, r3, #21
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b08b      	sub	sp, #44	; 0x2c
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	2314      	movs	r3, #20
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f001 ffae 	bl	8002640 <memset>
  if(huart->Instance==USART2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a3b      	ldr	r2, [pc, #236]	; (80007d8 <HAL_UART_MspInit+0x10c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d16f      	bne.n	80007ce <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <HAL_UART_MspInit+0x110>)
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <HAL_UART_MspInit+0x110>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	61da      	str	r2, [r3, #28]
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <HAL_UART_MspInit+0x110>)
 80006fe:	69da      	ldr	r2, [r3, #28]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <HAL_UART_MspInit+0x110>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b33      	ldr	r3, [pc, #204]	; (80007dc <HAL_UART_MspInit+0x110>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0289      	lsls	r1, r1, #10
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <HAL_UART_MspInit+0x110>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	029b      	lsls	r3, r3, #10
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000726:	2414      	movs	r4, #20
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2204      	movs	r2, #4
 800072c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2203      	movs	r2, #3
 800073e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	193a      	adds	r2, r7, r4
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fbf0 	bl	8000f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2208      	movs	r2, #8
 800075a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2202      	movs	r2, #2
 8000760:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fbd9 	bl	8000f34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_UART_MspInit+0x114>)
 8000784:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <HAL_UART_MspInit+0x118>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_UART_MspInit+0x114>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_UART_MspInit+0x114>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_UART_MspInit+0x114>)
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_MspInit+0x114>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007a8:	2220      	movs	r2, #32
 80007aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fa25 	bl	8000c04 <HAL_DMA_Init>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80007be:	f7ff ff5b 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0x114>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00b      	add	sp, #44	; 0x2c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	20000348 	.word	0x20000348
 80007e4:	40020058 	.word	0x40020058

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f8fe 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fa9c 	bl	8000d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000348 	.word	0x20000348

08000834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000846:	e000      	b.n	800084a <_read+0x16>
 8000848:	bf00      	nop
 800084a:	0001      	movs	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
	}

return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b006      	add	sp, #24
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:
	}
	return len;
}

int _close(int file)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return -1;
 8000876:	2301      	movs	r3, #1
 8000878:	425b      	negs	r3, r3
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}

08000882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0192      	lsls	r2, r2, #6
 8000892:	605a      	str	r2, [r3, #4]
	return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}

0800089e <_isatty>:

int _isatty(int file)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x50>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x16>
		heap_end = &end;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <_sbrk+0x50>)
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <_sbrk+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <_sbrk+0x50>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <_sbrk+0x50>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	466a      	mov	r2, sp
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d907      	bls.n	8000902 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008f2:	f001 fe7b 	bl	80025ec <__errno>
 80008f6:	0003      	movs	r3, r0
 80008f8:	220c      	movs	r2, #12
 80008fa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	e006      	b.n	8000910 <_sbrk+0x48>
	}

	heap_end += incr;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <_sbrk+0x50>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	18d2      	adds	r2, r2, r3
 800090a:	4b03      	ldr	r3, [pc, #12]	; (8000918 <_sbrk+0x50>)
 800090c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b004      	add	sp, #16
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000033c 	.word	0x2000033c
 800091c:	20000418 	.word	0x20000418

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490e      	ldr	r1, [pc, #56]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000956:	f7ff ffe3 	bl	8000920 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800095a:	f001 fe4d 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fd47 	bl	80003f0 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000970:	080032d8 	.word	0x080032d8
  ldr r2, =_sbss
 8000974:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000978:	20000414 	.word	0x20000414

0800097c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_IRQHandler>
	...

08000980 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_Init+0x24>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_Init+0x24>)
 800098a:	2110      	movs	r1, #16
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f809 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff fe75 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x5c>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x60>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0019      	movs	r1, r3
 80009ba:	23fa      	movs	r3, #250	; 0xfa
 80009bc:	0098      	lsls	r0, r3, #2
 80009be:	f7ff fba3 	bl	8000108 <__udivsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff fb9e 	bl	8000108 <__udivsi3>
 80009cc:	0003      	movs	r3, r0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f90b 	bl	8000bea <HAL_SYSTICK_Config>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e00f      	b.n	80009fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d80b      	bhi.n	80009fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2301      	movs	r3, #1
 80009e6:	425b      	negs	r3, r3
 80009e8:	2200      	movs	r2, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f8d8 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_InitTick+0x64>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	18d2      	adds	r2, r2, r3
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	2000040c 	.word	0x2000040c

08000a34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	2000040c 	.word	0x2000040c

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	0002      	movs	r2, r0
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5a:	d809      	bhi.n	8000a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	231f      	movs	r3, #31
 8000a64:	401a      	ands	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_EnableIRQ+0x30>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	; 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <SysTick_Config+0x40>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d901      	bls.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e010      	b.n	8000b90 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <SysTick_Config+0x44>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	3a01      	subs	r2, #1
 8000b74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	2301      	movs	r3, #1
 8000b78:	425b      	negs	r3, r3
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff ff7d 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SysTick_Config+0x44>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SysTick_Config+0x44>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	00ffffff 	.word	0x00ffffff
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff33 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffaf 	bl	8000b58 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e036      	b.n	8000c88 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2221      	movs	r2, #33	; 0x21
 8000c1e:	2102      	movs	r1, #2
 8000c20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_DMA_Init+0x8c>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f946 	bl	8000efc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2221      	movs	r2, #33	; 0x21
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2220      	movs	r2, #32
 8000c82:	2100      	movs	r1, #0
 8000c84:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}  
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b004      	add	sp, #16
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	ffffc00f 	.word	0xffffc00f

08000c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2317      	movs	r3, #23
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2220      	movs	r2, #32
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_DMA_Start_IT+0x24>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e04f      	b.n	8000d58 <HAL_DMA_Start_IT+0xc4>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2221      	movs	r2, #33	; 0x21
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d13a      	bne.n	8000d42 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2221      	movs	r2, #33	; 0x21
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 f8d7 	bl	8000ea4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	210e      	movs	r1, #14
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e00f      	b.n	8000d30 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2220      	movs	r2, #32
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d4a:	2317      	movs	r3, #23
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000d52:	2317      	movs	r3, #23
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781b      	ldrb	r3, [r3, #0]
} 
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b006      	add	sp, #24
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	d024      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x72>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d020      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2220      	movs	r2, #32
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d107      	bne.n	8000dac <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2104      	movs	r1, #4
 8000da8:	438a      	bics	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db4:	2104      	movs	r1, #4
 8000db6:	4091      	lsls	r1, r2
 8000db8:	000a      	movs	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d100      	bne.n	8000dc6 <HAL_DMA_IRQHandler+0x66>
 8000dc4:	e06a      	b.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	0010      	movs	r0, r2
 8000dce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dd0:	e064      	b.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_DMA_IRQHandler+0xda>
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	d027      	beq.n	8000e3a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2220      	movs	r2, #32
 8000df2:	4013      	ands	r3, r2
 8000df4:	d10b      	bne.n	8000e0e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	210a      	movs	r1, #10
 8000e02:	438a      	bics	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2221      	movs	r2, #33	; 0x21
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e16:	2102      	movs	r1, #2
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d036      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	0010      	movs	r0, r2
 8000e36:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e38:	e030      	b.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2208      	movs	r2, #8
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	d028      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d024      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	210e      	movs	r1, #14
 8000e5e:	438a      	bics	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2221      	movs	r2, #33	; 0x21
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	2100      	movs	r1, #0
 8000e86:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	0010      	movs	r0, r2
 8000e98:	4798      	blx	r3
    }
   }
}  
 8000e9a:	e7ff      	b.n	8000e9c <HAL_DMA_IRQHandler+0x13c>
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b004      	add	sp, #16
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d108      	bne.n	8000ee4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ee2:	e007      	b.n	8000ef4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b004      	add	sp, #16
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <DMA_CalcBaseAndBitshift+0x30>)
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	4463      	add	r3, ip
 8000f0e:	2114      	movs	r1, #20
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff f8f9 	bl	8000108 <__udivsi3>
 8000f16:	0003      	movs	r3, r0
 8000f18:	009a      	lsls	r2, r3, #2
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <DMA_CalcBaseAndBitshift+0x34>)
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	bffdfff8 	.word	0xbffdfff8
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e14f      	b.n	80011e4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d100      	bne.n	8000f5c <HAL_GPIO_Init+0x28>
 8000f5a:	e140      	b.n	80011de <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x38>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b12      	cmp	r3, #18
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	58d3      	ldr	r3, [r2, r3]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2107      	movs	r1, #7
 8000f98:	400b      	ands	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d00b      	beq.n	8001008 <HAL_GPIO_Init+0xd4>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffc:	2b11      	cmp	r3, #17
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	43da      	mvns	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	2201      	movs	r2, #1
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_GPIO_Init+0x174>
 80010a6:	e09a      	b.n	80011de <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	4b54      	ldr	r3, [pc, #336]	; (80011fc <HAL_GPIO_Init+0x2c8>)
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_GPIO_Init+0x2c8>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x2c8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	589b      	ldr	r3, [r3, r2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	2390      	movs	r3, #144	; 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1e2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a44      	ldr	r2, [pc, #272]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1de>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a43      	ldr	r2, [pc, #268]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1da>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a42      	ldr	r2, [pc, #264]	; (800120c <HAL_GPIO_Init+0x2d8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1d6>
 8001106:	2303      	movs	r3, #3
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x1e4>
 800110a:	2305      	movs	r3, #5
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x1e4>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x1e4>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x1e4>
 8001116:	2300      	movs	r3, #0
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	2103      	movs	r1, #3
 800111c:	400a      	ands	r2, r1
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	4013      	ands	r3, r2
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	4013      	ands	r3, r2
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	035b      	lsls	r3, r3, #13
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	039b      	lsls	r3, r3, #14
 80011cc:	4013      	ands	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	40da      	lsrs	r2, r3
 80011ec:	1e13      	subs	r3, r2, #0
 80011ee:	d000      	beq.n	80011f2 <HAL_GPIO_Init+0x2be>
 80011f0:	e6a8      	b.n	8000f44 <HAL_GPIO_Init+0x10>
  } 
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b006      	add	sp, #24
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	0008      	movs	r0, r1
 800121e:	0011      	movs	r1, r2
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	1c7b      	adds	r3, r7, #1
 8001228:	1c0a      	adds	r2, r1, #0
 800122a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122c:	1c7b      	adds	r3, r7, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e303      	b.n	800186a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x1e>
 800126c:	e08d      	b.n	800138a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800126e:	4bc4      	ldr	r3, [pc, #784]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	220c      	movs	r2, #12
 8001274:	4013      	ands	r3, r2
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00e      	beq.n	8001298 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127a:	4bc1      	ldr	r3, [pc, #772]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	220c      	movs	r2, #12
 8001280:	4013      	ands	r3, r2
 8001282:	2b08      	cmp	r3, #8
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x64>
 8001286:	4bbe      	ldr	r3, [pc, #760]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	401a      	ands	r2, r3
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	429a      	cmp	r2, r3
 8001296:	d10d      	bne.n	80012b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4bb9      	ldr	r3, [pc, #740]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x56>
 80012a4:	e070      	b.n	8001388 <HAL_RCC_OscConfig+0x138>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d000      	beq.n	80012b0 <HAL_RCC_OscConfig+0x60>
 80012ae:	e06b      	b.n	8001388 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e2da      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x7c>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4baf      	ldr	r3, [pc, #700]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0249      	lsls	r1, r1, #9
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e02f      	b.n	800132c <HAL_RCC_OscConfig+0xdc>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x9e>
 80012d4:	4baa      	ldr	r3, [pc, #680]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012da:	49aa      	ldr	r1, [pc, #680]	; (8001584 <HAL_RCC_OscConfig+0x334>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	4ba7      	ldr	r3, [pc, #668]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012e6:	49a8      	ldr	r1, [pc, #672]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e01e      	b.n	800132c <HAL_RCC_OscConfig+0xdc>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10e      	bne.n	8001314 <HAL_RCC_OscConfig+0xc4>
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	02c9      	lsls	r1, r1, #11
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	0249      	lsls	r1, r1, #9
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0xdc>
 8001314:	4b9a      	ldr	r3, [pc, #616]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b99      	ldr	r3, [pc, #612]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800131a:	499a      	ldr	r1, [pc, #616]	; (8001584 <HAL_RCC_OscConfig+0x334>)
 800131c:	400a      	ands	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	4b97      	ldr	r3, [pc, #604]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b96      	ldr	r3, [pc, #600]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001326:	4998      	ldr	r1, [pc, #608]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d014      	beq.n	800135e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb7e 	bl	8000a34 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fb79 	bl	8000a34 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e28c      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001350:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0xee>
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fb69 	bl	8000a34 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fb64 	bl	8000a34 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e277      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	4013      	ands	r3, r2
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x118>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x146>
 8001394:	e069      	b.n	800146a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	220c      	movs	r2, #12
 800139c:	4013      	ands	r3, r2
 800139e:	d00b      	beq.n	80013b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a0:	4b77      	ldr	r3, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	220c      	movs	r2, #12
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d11c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x196>
 80013ac:	4b74      	ldr	r3, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	025b      	lsls	r3, r3, #9
 80013b4:	4013      	ands	r3, r2
 80013b6:	d116      	bne.n	80013e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e24d      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	22f8      	movs	r2, #248	; 0xf8
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00da      	lsls	r2, r3, #3
 80013de:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e4:	e041      	b.n	800146a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d024      	beq.n	8001438 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	4b64      	ldr	r3, [pc, #400]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb1b 	bl	8000a34 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fb16 	bl	8000a34 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e229      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d0f1      	beq.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	22f8      	movs	r2, #248	; 0xf8
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00da      	lsls	r2, r3, #3
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e018      	b.n	800146a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff faf6 	bl	8000a34 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff faf1 	bl	8000a34 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e204      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	4013      	ands	r3, r2
 8001472:	d036      	beq.n	80014e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d019      	beq.n	80014b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 800147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fad4 	bl	8000a34 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff facf 	bl	8000a34 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1e2      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x242>
 80014ae:	e018      	b.n	80014e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	438a      	bics	r2, r1
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff faba 	bl	8000a34 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fab5 	bl	8000a34 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1c8      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d1f1      	bne.n	80014c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_OscConfig+0x29e>
 80014ec:	e0b6      	b.n	800165c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	231f      	movs	r3, #31
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	4013      	ands	r3, r2
 8001500:	d111      	bne.n	8001526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0549      	lsls	r1, r1, #21
 800150c:	430a      	orrs	r2, r1
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800151e:	231f      	movs	r3, #31
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0049      	lsls	r1, r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa78 	bl	8000a34 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fa73 	bl	8000a34 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e186      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10f      	bne.n	8001590 <HAL_RCC_OscConfig+0x340>
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_RCC_OscConfig+0x330>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	621a      	str	r2, [r3, #32]
 800157c:	e036      	b.n	80015ec <HAL_RCC_OscConfig+0x39c>
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000
 8001584:	fffeffff 	.word	0xfffeffff
 8001588:	fffbffff 	.word	0xfffbffff
 800158c:	40007000 	.word	0x40007000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x362>
 8001598:	4bb6      	ldr	r3, [pc, #728]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	4bb5      	ldr	r3, [pc, #724]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800159e:	2101      	movs	r1, #1
 80015a0:	438a      	bics	r2, r1
 80015a2:	621a      	str	r2, [r3, #32]
 80015a4:	4bb3      	ldr	r3, [pc, #716]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4bb2      	ldr	r3, [pc, #712]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015aa:	2104      	movs	r1, #4
 80015ac:	438a      	bics	r2, r1
 80015ae:	621a      	str	r2, [r3, #32]
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x39c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x384>
 80015ba:	4bae      	ldr	r3, [pc, #696]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	4bad      	ldr	r3, [pc, #692]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015c0:	2104      	movs	r1, #4
 80015c2:	430a      	orrs	r2, r1
 80015c4:	621a      	str	r2, [r3, #32]
 80015c6:	4bab      	ldr	r3, [pc, #684]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015c8:	6a1a      	ldr	r2, [r3, #32]
 80015ca:	4baa      	ldr	r3, [pc, #680]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	621a      	str	r2, [r3, #32]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x39c>
 80015d4:	4ba7      	ldr	r3, [pc, #668]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015d6:	6a1a      	ldr	r2, [r3, #32]
 80015d8:	4ba6      	ldr	r3, [pc, #664]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015da:	2101      	movs	r1, #1
 80015dc:	438a      	bics	r2, r1
 80015de:	621a      	str	r2, [r3, #32]
 80015e0:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	4ba3      	ldr	r3, [pc, #652]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d014      	beq.n	800161e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fa1e 	bl	8000a34 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e009      	b.n	8001612 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fa19 	bl	8000a34 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a9b      	ldr	r2, [pc, #620]	; (8001878 <HAL_RCC_OscConfig+0x628>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e12b      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b98      	ldr	r3, [pc, #608]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x3ae>
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fa09 	bl	8000a34 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e009      	b.n	800163c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fa04 	bl	8000a34 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a91      	ldr	r2, [pc, #580]	; (8001878 <HAL_RCC_OscConfig+0x628>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e116      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001646:	231f      	movs	r3, #31
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	4b87      	ldr	r3, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001656:	4989      	ldr	r1, [pc, #548]	; (800187c <HAL_RCC_OscConfig+0x62c>)
 8001658:	400a      	ands	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2210      	movs	r2, #16
 8001662:	4013      	ands	r3, r2
 8001664:	d063      	beq.n	800172e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d12a      	bne.n	80016c4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	4b80      	ldr	r3, [pc, #512]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001674:	2104      	movs	r1, #4
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800167a:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800167c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167e:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001680:	2101      	movs	r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff f9d5 	bl	8000a34 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001690:	f7ff f9d0 	bl	8000a34 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0e3      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016a2:	4b74      	ldr	r3, [pc, #464]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f1      	beq.n	8001690 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016ac:	4b71      	ldr	r3, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	22f8      	movs	r2, #248	; 0xf8
 80016b2:	4393      	bics	r3, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34
 80016c2:	e034      	b.n	800172e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	3305      	adds	r3, #5
 80016ca:	d111      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	438a      	bics	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016d8:	4b66      	ldr	r3, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016dc:	22f8      	movs	r2, #248	; 0xf8
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	00da      	lsls	r2, r3, #3
 80016e8:	4b62      	ldr	r3, [pc, #392]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
 80016ee:	e01e      	b.n	800172e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016f0:	4b60      	ldr	r3, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016f6:	2104      	movs	r1, #4
 80016f8:	430a      	orrs	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80016fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001700:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff f994 	bl	8000a34 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001712:	f7ff f98f 	bl	8000a34 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0a2      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <HAL_RCC_OscConfig+0x4e8>
 8001736:	e097      	b.n	8001868 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	220c      	movs	r2, #12
 800173e:	4013      	ands	r3, r2
 8001740:	2b08      	cmp	r3, #8
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x4f6>
 8001744:	e06b      	b.n	800181e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d14c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b48      	ldr	r3, [pc, #288]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001754:	494a      	ldr	r1, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x630>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff f96b 	bl	8000a34 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff f966 	bl	8000a34 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e079      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	049b      	lsls	r3, r3, #18
 800177e:	4013      	ands	r3, r2
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	220f      	movs	r2, #15
 8001788:	4393      	bics	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <HAL_RCC_OscConfig+0x634>)
 800179c:	4013      	ands	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	431a      	orrs	r2, r3
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0449      	lsls	r1, r1, #17
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f939 	bl	8000a34 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f934 	bl	8000a34 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e047      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	049b      	lsls	r3, r3, #18
 80017e2:	4013      	ands	r3, r2
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x578>
 80017e6:	e03f      	b.n	8001868 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 80017ee:	4924      	ldr	r1, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x630>)
 80017f0:	400a      	ands	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f91e 	bl	8000a34 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f919 	bl	8000a34 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e02c      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	049b      	lsls	r3, r3, #18
 8001818:	4013      	ands	r3, r2
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x5ae>
 800181c:	e024      	b.n	8001868 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e01f      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_RCC_OscConfig+0x624>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	429a      	cmp	r2, r3
 8001844:	d10e      	bne.n	8001864 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	220f      	movs	r2, #15
 800184a:	401a      	ands	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	23f0      	movs	r3, #240	; 0xf0
 8001858:	039b      	lsls	r3, r3, #14
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b008      	add	sp, #32
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40021000 	.word	0x40021000
 8001878:	00001388 	.word	0x00001388
 800187c:	efffffff 	.word	0xefffffff
 8001880:	feffffff 	.word	0xfeffffff
 8001884:	ffc2ffff 	.word	0xffc2ffff

08001888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b3      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d911      	bls.n	80018ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4393      	bics	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e09a      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d015      	beq.n	8001904 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2204      	movs	r2, #4
 80018de:	4013      	ands	r3, r2
 80018e0:	d006      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80018e8:	21e0      	movs	r1, #224	; 0xe0
 80018ea:	00c9      	lsls	r1, r1, #3
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	22f0      	movs	r2, #240	; 0xf0
 80018f6:	4393      	bics	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	d040      	beq.n	8001990 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	029b      	lsls	r3, r3, #10
 800191e:	4013      	ands	r3, r2
 8001920:	d114      	bne.n	800194c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06e      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	049b      	lsls	r3, r3, #18
 8001936:	4013      	ands	r3, r2
 8001938:	d108      	bne.n	800194c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e062      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e05b      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff f868 	bl	8000a34 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff f863 	bl	8000a34 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x18c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e042      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	220c      	movs	r2, #12
 8001984:	401a      	ands	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1ec      	bne.n	800196a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d211      	bcs.n	80019c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4393      	bics	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x184>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e020      	b.n	8001a04 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_RCC_ClockConfig+0x190>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019e0:	f000 f820 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e4:	0001      	movs	r1, r0
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x188>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	220f      	movs	r2, #15
 80019ee:	4013      	ands	r3, r2
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x194>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	000a      	movs	r2, r1
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x198>)
 80019fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7fe ffd3 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b004      	add	sp, #16
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	fffff8ff 	.word	0xfffff8ff
 8001a1c:	08003148 	.word	0x08003148
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08f      	sub	sp, #60	; 0x3c
 8001a28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a2a:	2314      	movs	r3, #20
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a32:	c313      	stmia	r3!, {r0, r1, r4}
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	220c      	movs	r2, #12
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d002      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x4a>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d003      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x50>
 8001a6c:	e02d      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a72:	e02d      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2214      	movs	r2, #20
 8001a7e:	18ba      	adds	r2, r7, r2
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	220f      	movs	r2, #15
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	1d3a      	adds	r2, r7, #4
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9e:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001aa0:	f7fe fb32 	bl	8000108 <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	4353      	muls	r3, r2
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
 8001aae:	e009      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	0152      	lsls	r2, r2, #5
 8001ab6:	1a52      	subs	r2, r2, r1
 8001ab8:	0193      	lsls	r3, r2, #6
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	185b      	adds	r3, r3, r1
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac8:	e002      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ace:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b00f      	add	sp, #60	; 0x3c
 8001ad8:	bd90      	pop	{r4, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	08003128 	.word	0x08003128
 8001ae0:	08003138 	.word	0x08003138
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_RCC_GetHCLKFreq+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b04:	f7ff fff2 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	2207      	movs	r2, #7
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	40d9      	lsrs	r1, r3
 8001b1a:	000b      	movs	r3, r1
}    
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003158 	.word	0x08003158

08001b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e044      	b.n	8001bc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2270      	movs	r2, #112	; 0x70
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7fe fdbb 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2224      	movs	r2, #36	; 0x24
 8001b5a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	438a      	bics	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 f988 	bl	8001e84 <UART_SetConfig>
 8001b74:	0003      	movs	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e024      	b.n	8001bc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fb01 	bl	8002190 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <HAL_UART_Init+0xa4>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2108      	movs	r1, #8
 8001baa:	438a      	bics	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fb99 	bl	80022f8 <UART_CheckIdleState>
 8001bc6:	0003      	movs	r3, r0
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	fffff7ff 	.word	0xfffff7ff

08001bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d000      	beq.n	8001bee <HAL_UART_Transmit+0x1a>
 8001bec:	e095      	b.n	8001d1a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_UART_Transmit+0x28>
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e08d      	b.n	8001d1c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	015b      	lsls	r3, r3, #5
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d109      	bne.n	8001c20 <HAL_UART_Transmit+0x4c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d001      	beq.n	8001c20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e07d      	b.n	8001d1c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2270      	movs	r2, #112	; 0x70
 8001c24:	5c9b      	ldrb	r3, [r3, r2]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Transmit+0x5a>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e076      	b.n	8001d1c <HAL_UART_Transmit+0x148>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2270      	movs	r2, #112	; 0x70
 8001c32:	2101      	movs	r1, #1
 8001c34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2221      	movs	r2, #33	; 0x21
 8001c40:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c42:	f7fe fef7 	bl	8000a34 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1dba      	adds	r2, r7, #6
 8001c4e:	2150      	movs	r1, #80	; 0x50
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1dba      	adds	r2, r7, #6
 8001c58:	2152      	movs	r1, #82	; 0x52
 8001c5a:	8812      	ldrh	r2, [r2, #0]
 8001c5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d108      	bne.n	8001c7c <HAL_UART_Transmit+0xa8>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d104      	bne.n	8001c7c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	e003      	b.n	8001c84 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c84:	e02d      	b.n	8001ce2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	0013      	movs	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	f000 fb76 	bl	8002384 <UART_WaitOnFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e03d      	b.n	8001d1c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10b      	bne.n	8001cbe <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	05d2      	lsls	r2, r2, #23
 8001cb0:	0dd2      	lsrs	r2, r2, #23
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e008      	b.n	8001cd0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b292      	uxth	r2, r2
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2252      	movs	r2, #82	; 0x52
 8001cd4:	5a9b      	ldrh	r3, [r3, r2]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2252      	movs	r2, #82	; 0x52
 8001ce0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2252      	movs	r2, #82	; 0x52
 8001ce6:	5a9b      	ldrh	r3, [r3, r2]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1cb      	bne.n	8001c86 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	f000 fb42 	bl	8002384 <UART_WaitOnFlagUntilTimeout>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e009      	b.n	8001d1c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2270      	movs	r2, #112	; 0x70
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b008      	add	sp, #32
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	1dbb      	adds	r3, r7, #6
 8001d30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d000      	beq.n	8001d3c <HAL_UART_Receive_DMA+0x18>
 8001d3a:	e07f      	b.n	8001e3c <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_UART_Receive_DMA+0x26>
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e077      	b.n	8001e3e <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d109      	bne.n	8001d6e <HAL_UART_Receive_DMA+0x4a>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d001      	beq.n	8001d6e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e067      	b.n	8001e3e <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2270      	movs	r2, #112	; 0x70
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_UART_Receive_DMA+0x58>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e060      	b.n	8001e3e <HAL_UART_Receive_DMA+0x11a>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2270      	movs	r2, #112	; 0x70
 8001d80:	2101      	movs	r1, #1
 8001d82:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1dba      	adds	r2, r7, #6
 8001d8e:	2158      	movs	r1, #88	; 0x58
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2222      	movs	r2, #34	; 0x22
 8001d9e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02a      	beq.n	8001dfe <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_UART_Receive_DMA+0x124>)
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_UART_Receive_DMA+0x128>)
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_UART_Receive_DMA+0x12c>)
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3324      	adds	r3, #36	; 0x24
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	001a      	movs	r2, r3
 8001dda:	1dbb      	adds	r3, r7, #6
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	f7fe ff59 	bl	8000c94 <HAL_DMA_Start_IT>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2210      	movs	r2, #16
 8001dea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2270      	movs	r2, #112	; 0x70
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2220      	movs	r2, #32
 8001df8:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01f      	b.n	8001e3e <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2270      	movs	r2, #112	; 0x70
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0049      	lsls	r1, r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e000      	b.n	8001e3e <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
  }
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	080024e9 	.word	0x080024e9
 8001e4c:	08002551 	.word	0x08002551
 8001e50:	0800256f 	.word	0x0800256f

08001e54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e90:	2317      	movs	r3, #23
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4aad      	ldr	r2, [pc, #692]	; (800216c <UART_SetConfig+0x2e8>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4aa8      	ldr	r2, [pc, #672]	; (8002170 <UART_SetConfig+0x2ec>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a9f      	ldr	r2, [pc, #636]	; (8002174 <UART_SetConfig+0x2f0>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a9b      	ldr	r2, [pc, #620]	; (8002178 <UART_SetConfig+0x2f4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d125      	bne.n	8001f5a <UART_SetConfig+0xd6>
 8001f0e:	4b9b      	ldr	r3, [pc, #620]	; (800217c <UART_SetConfig+0x2f8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	2203      	movs	r2, #3
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d00f      	beq.n	8001f3a <UART_SetConfig+0xb6>
 8001f1a:	d304      	bcc.n	8001f26 <UART_SetConfig+0xa2>
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d011      	beq.n	8001f44 <UART_SetConfig+0xc0>
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d005      	beq.n	8001f30 <UART_SetConfig+0xac>
 8001f24:	e013      	b.n	8001f4e <UART_SetConfig+0xca>
 8001f26:	231f      	movs	r3, #31
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e022      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f30:	231f      	movs	r3, #31
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e01d      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2204      	movs	r2, #4
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e018      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f44:	231f      	movs	r3, #31
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2208      	movs	r2, #8
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e013      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f4e:	231f      	movs	r3, #31
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	2210      	movs	r2, #16
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	e00d      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a88      	ldr	r2, [pc, #544]	; (8002180 <UART_SetConfig+0x2fc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d104      	bne.n	8001f6e <UART_SetConfig+0xea>
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e003      	b.n	8001f76 <UART_SetConfig+0xf2>
 8001f6e:	231f      	movs	r3, #31
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2210      	movs	r2, #16
 8001f74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d000      	beq.n	8001f84 <UART_SetConfig+0x100>
 8001f82:	e07d      	b.n	8002080 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001f84:	231f      	movs	r3, #31
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d01c      	beq.n	8001fc8 <UART_SetConfig+0x144>
 8001f8e:	dc02      	bgt.n	8001f96 <UART_SetConfig+0x112>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <UART_SetConfig+0x11c>
 8001f94:	e04b      	b.n	800202e <UART_SetConfig+0x1aa>
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d025      	beq.n	8001fe6 <UART_SetConfig+0x162>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d037      	beq.n	800200e <UART_SetConfig+0x18a>
 8001f9e:	e046      	b.n	800202e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f7ff fdae 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	005a      	lsls	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	085b      	lsrs	r3, r3, #1
 8001fb2:	18d2      	adds	r2, r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0019      	movs	r1, r3
 8001fba:	0010      	movs	r0, r2
 8001fbc:	f7fe f8a4 	bl	8000108 <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	61bb      	str	r3, [r7, #24]
        break;
 8001fc6:	e037      	b.n	8002038 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <UART_SetConfig+0x300>)
 8001fd0:	189a      	adds	r2, r3, r2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	0010      	movs	r0, r2
 8001fda:	f7fe f895 	bl	8000108 <__udivsi3>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	61bb      	str	r3, [r7, #24]
        break;
 8001fe4:	e028      	b.n	8002038 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fe6:	f7ff fd1d 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 8001fea:	0003      	movs	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	005a      	lsls	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	18d2      	adds	r2, r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	0019      	movs	r1, r3
 8002000:	0010      	movs	r0, r2
 8002002:	f7fe f881 	bl	8000108 <__udivsi3>
 8002006:	0003      	movs	r3, r0
 8002008:	b29b      	uxth	r3, r3
 800200a:	61bb      	str	r3, [r7, #24]
        break;
 800200c:	e014      	b.n	8002038 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	0252      	lsls	r2, r2, #9
 8002018:	189a      	adds	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0019      	movs	r1, r3
 8002020:	0010      	movs	r0, r2
 8002022:	f7fe f871 	bl	8000108 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	b29b      	uxth	r3, r3
 800202a:	61bb      	str	r3, [r7, #24]
        break;
 800202c:	e004      	b.n	8002038 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800202e:	2317      	movs	r3, #23
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
        break;
 8002036:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	d91b      	bls.n	8002076 <UART_SetConfig+0x1f2>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4a51      	ldr	r2, [pc, #324]	; (8002188 <UART_SetConfig+0x304>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d817      	bhi.n	8002076 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	b29a      	uxth	r2, r3
 800204a:	200a      	movs	r0, #10
 800204c:	183b      	adds	r3, r7, r0
 800204e:	210f      	movs	r1, #15
 8002050:	438a      	bics	r2, r1
 8002052:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	b29b      	uxth	r3, r3
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	b299      	uxth	r1, r3
 8002060:	183b      	adds	r3, r7, r0
 8002062:	183a      	adds	r2, r7, r0
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	183a      	adds	r2, r7, r0
 8002070:	8812      	ldrh	r2, [r2, #0]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	e06c      	b.n	8002150 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002076:	2317      	movs	r3, #23
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e067      	b.n	8002150 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002080:	231f      	movs	r3, #31
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d01b      	beq.n	80020c2 <UART_SetConfig+0x23e>
 800208a:	dc02      	bgt.n	8002092 <UART_SetConfig+0x20e>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <UART_SetConfig+0x218>
 8002090:	e049      	b.n	8002126 <UART_SetConfig+0x2a2>
 8002092:	2b04      	cmp	r3, #4
 8002094:	d024      	beq.n	80020e0 <UART_SetConfig+0x25c>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d035      	beq.n	8002106 <UART_SetConfig+0x282>
 800209a:	e044      	b.n	8002126 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800209c:	f7ff fd30 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	085a      	lsrs	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	18d2      	adds	r2, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0019      	movs	r1, r3
 80020b4:	0010      	movs	r0, r2
 80020b6:	f7fe f827 	bl	8000108 <__udivsi3>
 80020ba:	0003      	movs	r3, r0
 80020bc:	b29b      	uxth	r3, r3
 80020be:	61bb      	str	r3, [r7, #24]
        break;
 80020c0:	e036      	b.n	8002130 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <UART_SetConfig+0x308>)
 80020ca:	189a      	adds	r2, r3, r2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0019      	movs	r1, r3
 80020d2:	0010      	movs	r0, r2
 80020d4:	f7fe f818 	bl	8000108 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	b29b      	uxth	r3, r3
 80020dc:	61bb      	str	r3, [r7, #24]
        break;
 80020de:	e027      	b.n	8002130 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020e0:	f7ff fca0 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80020e4:	0003      	movs	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	085a      	lsrs	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	18d2      	adds	r2, r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	0019      	movs	r1, r3
 80020f8:	0010      	movs	r0, r2
 80020fa:	f7fe f805 	bl	8000108 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	b29b      	uxth	r3, r3
 8002102:	61bb      	str	r3, [r7, #24]
        break;
 8002104:	e014      	b.n	8002130 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	189a      	adds	r2, r3, r2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0019      	movs	r1, r3
 8002118:	0010      	movs	r0, r2
 800211a:	f7fd fff5 	bl	8000108 <__udivsi3>
 800211e:	0003      	movs	r3, r0
 8002120:	b29b      	uxth	r3, r3
 8002122:	61bb      	str	r3, [r7, #24]
        break;
 8002124:	e004      	b.n	8002130 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002126:	2317      	movs	r3, #23
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
        break;
 800212e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	d908      	bls.n	8002148 <UART_SetConfig+0x2c4>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <UART_SetConfig+0x304>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d804      	bhi.n	8002148 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e003      	b.n	8002150 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002148:	2317      	movs	r3, #23
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800215c:	2317      	movs	r3, #23
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781b      	ldrb	r3, [r3, #0]
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b008      	add	sp, #32
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	ffff69f3 	.word	0xffff69f3
 8002170:	ffffcfff 	.word	0xffffcfff
 8002174:	fffff4ff 	.word	0xfffff4ff
 8002178:	40013800 	.word	0x40013800
 800217c:	40021000 	.word	0x40021000
 8002180:	40004400 	.word	0x40004400
 8002184:	00f42400 	.word	0x00f42400
 8002188:	0000ffff 	.word	0x0000ffff
 800218c:	007a1200 	.word	0x007a1200

08002190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d00b      	beq.n	80021ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <UART_AdvFeatureConfig+0x144>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d00b      	beq.n	80021dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <UART_AdvFeatureConfig+0x148>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00b      	beq.n	80021fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <UART_AdvFeatureConfig+0x14c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2208      	movs	r2, #8
 8002204:	4013      	ands	r3, r2
 8002206:	d00b      	beq.n	8002220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <UART_AdvFeatureConfig+0x150>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	d00b      	beq.n	8002242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <UART_AdvFeatureConfig+0x154>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d00b      	beq.n	8002264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <UART_AdvFeatureConfig+0x158>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	4013      	ands	r3, r2
 800226c:	d01d      	beq.n	80022aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <UART_AdvFeatureConfig+0x15c>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	035b      	lsls	r3, r3, #13
 800228e:	429a      	cmp	r2, r3
 8002290:	d10b      	bne.n	80022aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <UART_AdvFeatureConfig+0x160>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00b      	beq.n	80022cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <UART_AdvFeatureConfig+0x164>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
  }
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	fffdffff 	.word	0xfffdffff
 80022d8:	fffeffff 	.word	0xfffeffff
 80022dc:	fffbffff 	.word	0xfffbffff
 80022e0:	ffff7fff 	.word	0xffff7fff
 80022e4:	ffffefff 	.word	0xffffefff
 80022e8:	ffffdfff 	.word	0xffffdfff
 80022ec:	ffefffff 	.word	0xffefffff
 80022f0:	ff9fffff 	.word	0xff9fffff
 80022f4:	fff7ffff 	.word	0xfff7ffff

080022f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002306:	f7fe fb95 	bl	8000a34 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	4013      	ands	r3, r2
 8002318:	2b08      	cmp	r3, #8
 800231a:	d10d      	bne.n	8002338 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	0399      	lsls	r1, r3, #14
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <UART_CheckIdleState+0x88>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	0013      	movs	r3, r2
 800232a:	2200      	movs	r2, #0
 800232c:	f000 f82a 	bl	8002384 <UART_WaitOnFlagUntilTimeout>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d001      	beq.n	8002338 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e01f      	b.n	8002378 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	2b04      	cmp	r3, #4
 8002344:	d10d      	bne.n	8002362 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	03d9      	lsls	r1, r3, #15
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <UART_CheckIdleState+0x88>)
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	0013      	movs	r3, r2
 8002354:	2200      	movs	r2, #0
 8002356:	f000 f815 	bl	8002384 <UART_WaitOnFlagUntilTimeout>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d001      	beq.n	8002362 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e00a      	b.n	8002378 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2270      	movs	r2, #112	; 0x70
 8002372:	2100      	movs	r1, #0
 8002374:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	01ffffff 	.word	0x01ffffff

08002384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002394:	e05d      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3301      	adds	r3, #1
 800239a:	d05a      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7fe fb4a 	bl	8000a34 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11b      	bne.n	80023ea <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	492f      	ldr	r1, [pc, #188]	; (800247c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	438a      	bics	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2270      	movs	r2, #112	; 0x70
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e043      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d02d      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	401a      	ands	r2, r3
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	429a      	cmp	r2, r3
 8002408:	d123      	bne.n	8002452 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4917      	ldr	r1, [pc, #92]	; (800247c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2270      	movs	r2, #112	; 0x70
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e00f      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	425a      	negs	r2, r3
 8002462:	4153      	adcs	r3, r2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	001a      	movs	r2, r3
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d092      	beq.n	8002396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	fffffe5f 	.word	0xfffffe5f

08002480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	21c0      	movs	r1, #192	; 0xc0
 8002494:	438a      	bics	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <UART_EndRxTransfer+0x3c>)
 80024bc:	400a      	ands	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	438a      	bics	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	661a      	str	r2, [r3, #96]	; 0x60
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	fffffedf 	.word	0xfffffedf

080024e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d01e      	beq.n	800253c <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	225a      	movs	r2, #90	; 0x5a
 8002502:	2100      	movs	r1, #0
 8002504:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <UART_DMAReceiveCplt+0x64>)
 8002512:	400a      	ands	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	438a      	bics	r2, r1
 8002524:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2140      	movs	r1, #64	; 0x40
 8002532:	438a      	bics	r2, r1
 8002534:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff fc88 	bl	8001e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b004      	add	sp, #16
 800254a:	bd80      	pop	{r7, pc}
 800254c:	fffffeff 	.word	0xfffffeff

08002550 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff fc7f 	bl	8001e64 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002586:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	4013      	ands	r3, r2
 8002592:	2b80      	cmp	r3, #128	; 0x80
 8002594:	d10a      	bne.n	80025ac <UART_DMAError+0x3e>
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b21      	cmp	r3, #33	; 0x21
 800259a:	d107      	bne.n	80025ac <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2252      	movs	r2, #82	; 0x52
 80025a0:	2100      	movs	r1, #0
 80025a2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff ff6a 	bl	8002480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d10a      	bne.n	80025d0 <UART_DMAError+0x62>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b22      	cmp	r3, #34	; 0x22
 80025be:	d107      	bne.n	80025d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	225a      	movs	r2, #90	; 0x5a
 80025c4:	2100      	movs	r1, #0
 80025c6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff6c 	bl	80024a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d4:	2210      	movs	r2, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff fc48 	bl	8001e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b006      	add	sp, #24
 80025ea:	bd80      	pop	{r7, pc}

080025ec <__errno>:
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <__errno+0x8>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	4770      	bx	lr
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	2000000c 	.word	0x2000000c

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	2600      	movs	r6, #0
 80025fc:	4d0c      	ldr	r5, [pc, #48]	; (8002630 <__libc_init_array+0x38>)
 80025fe:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <__libc_init_array+0x3c>)
 8002600:	1b64      	subs	r4, r4, r5
 8002602:	10a4      	asrs	r4, r4, #2
 8002604:	42a6      	cmp	r6, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	2600      	movs	r6, #0
 800260a:	f000 fd73 	bl	80030f4 <_init>
 800260e:	4d0a      	ldr	r5, [pc, #40]	; (8002638 <__libc_init_array+0x40>)
 8002610:	4c0a      	ldr	r4, [pc, #40]	; (800263c <__libc_init_array+0x44>)
 8002612:	1b64      	subs	r4, r4, r5
 8002614:	10a4      	asrs	r4, r4, #2
 8002616:	42a6      	cmp	r6, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	00b3      	lsls	r3, r6, #2
 800261e:	58eb      	ldr	r3, [r5, r3]
 8002620:	4798      	blx	r3
 8002622:	3601      	adds	r6, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	00b3      	lsls	r3, r6, #2
 8002628:	58eb      	ldr	r3, [r5, r3]
 800262a:	4798      	blx	r3
 800262c:	3601      	adds	r6, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	080032d0 	.word	0x080032d0
 8002634:	080032d0 	.word	0x080032d0
 8002638:	080032d0 	.word	0x080032d0
 800263c:	080032d4 	.word	0x080032d4

08002640 <memset>:
 8002640:	0003      	movs	r3, r0
 8002642:	1812      	adds	r2, r2, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	d100      	bne.n	800264a <memset+0xa>
 8002648:	4770      	bx	lr
 800264a:	7019      	strb	r1, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	e7f9      	b.n	8002644 <memset+0x4>

08002650 <_puts_r>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	0005      	movs	r5, r0
 8002654:	000e      	movs	r6, r1
 8002656:	2800      	cmp	r0, #0
 8002658:	d004      	beq.n	8002664 <_puts_r+0x14>
 800265a:	6983      	ldr	r3, [r0, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <_puts_r+0x14>
 8002660:	f000 fa98 	bl	8002b94 <__sinit>
 8002664:	69ab      	ldr	r3, [r5, #24]
 8002666:	68ac      	ldr	r4, [r5, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_puts_r+0x22>
 800266c:	0028      	movs	r0, r5
 800266e:	f000 fa91 	bl	8002b94 <__sinit>
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <_puts_r+0xb4>)
 8002674:	429c      	cmp	r4, r3
 8002676:	d10f      	bne.n	8002698 <_puts_r+0x48>
 8002678:	686c      	ldr	r4, [r5, #4]
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	071b      	lsls	r3, r3, #28
 800267e:	d502      	bpl.n	8002686 <_puts_r+0x36>
 8002680:	6923      	ldr	r3, [r4, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d11f      	bne.n	80026c6 <_puts_r+0x76>
 8002686:	0021      	movs	r1, r4
 8002688:	0028      	movs	r0, r5
 800268a:	f000 f915 	bl	80028b8 <__swsetup_r>
 800268e:	2800      	cmp	r0, #0
 8002690:	d019      	beq.n	80026c6 <_puts_r+0x76>
 8002692:	2001      	movs	r0, #1
 8002694:	4240      	negs	r0, r0
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <_puts_r+0xb8>)
 800269a:	429c      	cmp	r4, r3
 800269c:	d101      	bne.n	80026a2 <_puts_r+0x52>
 800269e:	68ac      	ldr	r4, [r5, #8]
 80026a0:	e7eb      	b.n	800267a <_puts_r+0x2a>
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <_puts_r+0xbc>)
 80026a4:	429c      	cmp	r4, r3
 80026a6:	d1e8      	bne.n	800267a <_puts_r+0x2a>
 80026a8:	68ec      	ldr	r4, [r5, #12]
 80026aa:	e7e6      	b.n	800267a <_puts_r+0x2a>
 80026ac:	3601      	adds	r6, #1
 80026ae:	60a3      	str	r3, [r4, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da04      	bge.n	80026be <_puts_r+0x6e>
 80026b4:	69a2      	ldr	r2, [r4, #24]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dc16      	bgt.n	80026e8 <_puts_r+0x98>
 80026ba:	290a      	cmp	r1, #10
 80026bc:	d014      	beq.n	80026e8 <_puts_r+0x98>
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	6022      	str	r2, [r4, #0]
 80026c4:	7019      	strb	r1, [r3, #0]
 80026c6:	68a3      	ldr	r3, [r4, #8]
 80026c8:	7831      	ldrb	r1, [r6, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	2900      	cmp	r1, #0
 80026ce:	d1ed      	bne.n	80026ac <_puts_r+0x5c>
 80026d0:	60a3      	str	r3, [r4, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da0f      	bge.n	80026f6 <_puts_r+0xa6>
 80026d6:	0022      	movs	r2, r4
 80026d8:	310a      	adds	r1, #10
 80026da:	0028      	movs	r0, r5
 80026dc:	f000 f896 	bl	800280c <__swbuf_r>
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d0d6      	beq.n	8002692 <_puts_r+0x42>
 80026e4:	200a      	movs	r0, #10
 80026e6:	e7d6      	b.n	8002696 <_puts_r+0x46>
 80026e8:	0022      	movs	r2, r4
 80026ea:	0028      	movs	r0, r5
 80026ec:	f000 f88e 	bl	800280c <__swbuf_r>
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	d1e8      	bne.n	80026c6 <_puts_r+0x76>
 80026f4:	e7cd      	b.n	8002692 <_puts_r+0x42>
 80026f6:	200a      	movs	r0, #10
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	6022      	str	r2, [r4, #0]
 80026fe:	7018      	strb	r0, [r3, #0]
 8002700:	e7c9      	b.n	8002696 <_puts_r+0x46>
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	08003184 	.word	0x08003184
 8002708:	080031a4 	.word	0x080031a4
 800270c:	08003164 	.word	0x08003164

08002710 <puts>:
 8002710:	b510      	push	{r4, lr}
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <puts+0x10>)
 8002714:	0001      	movs	r1, r0
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f7ff ff9a 	bl	8002650 <_puts_r>
 800271c:	bd10      	pop	{r4, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	2000000c 	.word	0x2000000c

08002724 <strcasecmp>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	0007      	movs	r7, r0
 8002728:	000e      	movs	r6, r1
 800272a:	783c      	ldrb	r4, [r7, #0]
 800272c:	f000 fac6 	bl	8002cbc <__locale_ctype_ptr>
 8002730:	2203      	movs	r2, #3
 8002732:	1900      	adds	r0, r0, r4
 8002734:	7843      	ldrb	r3, [r0, #1]
 8002736:	4013      	ands	r3, r2
 8002738:	2b01      	cmp	r3, #1
 800273a:	d100      	bne.n	800273e <strcasecmp+0x1a>
 800273c:	3420      	adds	r4, #32
 800273e:	7835      	ldrb	r5, [r6, #0]
 8002740:	f000 fabc 	bl	8002cbc <__locale_ctype_ptr>
 8002744:	2203      	movs	r2, #3
 8002746:	1940      	adds	r0, r0, r5
 8002748:	7843      	ldrb	r3, [r0, #1]
 800274a:	4013      	ands	r3, r2
 800274c:	2b01      	cmp	r3, #1
 800274e:	d100      	bne.n	8002752 <strcasecmp+0x2e>
 8002750:	3520      	adds	r5, #32
 8002752:	1b60      	subs	r0, r4, r5
 8002754:	d103      	bne.n	800275e <strcasecmp+0x3a>
 8002756:	3701      	adds	r7, #1
 8002758:	3601      	adds	r6, #1
 800275a:	2d00      	cmp	r5, #0
 800275c:	d1e5      	bne.n	800272a <strcasecmp+0x6>
 800275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002760 <strtok>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <strtok+0x4c>)
 8002764:	0006      	movs	r6, r0
 8002766:	681d      	ldr	r5, [r3, #0]
 8002768:	000f      	movs	r7, r1
 800276a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800276c:	2c00      	cmp	r4, #0
 800276e:	d116      	bne.n	800279e <strtok+0x3e>
 8002770:	2050      	movs	r0, #80	; 0x50
 8002772:	f000 fb1d 	bl	8002db0 <malloc>
 8002776:	65a8      	str	r0, [r5, #88]	; 0x58
 8002778:	6004      	str	r4, [r0, #0]
 800277a:	6044      	str	r4, [r0, #4]
 800277c:	6084      	str	r4, [r0, #8]
 800277e:	60c4      	str	r4, [r0, #12]
 8002780:	6104      	str	r4, [r0, #16]
 8002782:	6144      	str	r4, [r0, #20]
 8002784:	6184      	str	r4, [r0, #24]
 8002786:	6284      	str	r4, [r0, #40]	; 0x28
 8002788:	62c4      	str	r4, [r0, #44]	; 0x2c
 800278a:	6304      	str	r4, [r0, #48]	; 0x30
 800278c:	6344      	str	r4, [r0, #52]	; 0x34
 800278e:	6384      	str	r4, [r0, #56]	; 0x38
 8002790:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002792:	6404      	str	r4, [r0, #64]	; 0x40
 8002794:	6444      	str	r4, [r0, #68]	; 0x44
 8002796:	6484      	str	r4, [r0, #72]	; 0x48
 8002798:	64c4      	str	r4, [r0, #76]	; 0x4c
 800279a:	7704      	strb	r4, [r0, #28]
 800279c:	6244      	str	r4, [r0, #36]	; 0x24
 800279e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80027a0:	0039      	movs	r1, r7
 80027a2:	0030      	movs	r0, r6
 80027a4:	2301      	movs	r3, #1
 80027a6:	f000 f803 	bl	80027b0 <__strtok_r>
 80027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <__strtok_r>:
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d104      	bne.n	80027c0 <__strtok_r+0x10>
 80027b6:	6810      	ldr	r0, [r2, #0]
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d101      	bne.n	80027c0 <__strtok_r+0x10>
 80027bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027be:	0020      	movs	r0, r4
 80027c0:	000e      	movs	r6, r1
 80027c2:	7805      	ldrb	r5, [r0, #0]
 80027c4:	1c44      	adds	r4, r0, #1
 80027c6:	7837      	ldrb	r7, [r6, #0]
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	d104      	bne.n	80027d6 <__strtok_r+0x26>
 80027cc:	2d00      	cmp	r5, #0
 80027ce:	d110      	bne.n	80027f2 <__strtok_r+0x42>
 80027d0:	6015      	str	r5, [r2, #0]
 80027d2:	0028      	movs	r0, r5
 80027d4:	e7f2      	b.n	80027bc <__strtok_r+0xc>
 80027d6:	3601      	adds	r6, #1
 80027d8:	42bd      	cmp	r5, r7
 80027da:	d1f4      	bne.n	80027c6 <__strtok_r+0x16>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <__strtok_r+0xe>
 80027e0:	6014      	str	r4, [r2, #0]
 80027e2:	7003      	strb	r3, [r0, #0]
 80027e4:	e7ea      	b.n	80027bc <__strtok_r+0xc>
 80027e6:	0033      	movs	r3, r6
 80027e8:	e00d      	b.n	8002806 <__strtok_r+0x56>
 80027ea:	3501      	adds	r5, #1
 80027ec:	2f00      	cmp	r7, #0
 80027ee:	d103      	bne.n	80027f8 <__strtok_r+0x48>
 80027f0:	001c      	movs	r4, r3
 80027f2:	000d      	movs	r5, r1
 80027f4:	7826      	ldrb	r6, [r4, #0]
 80027f6:	1c63      	adds	r3, r4, #1
 80027f8:	782f      	ldrb	r7, [r5, #0]
 80027fa:	42be      	cmp	r6, r7
 80027fc:	d1f5      	bne.n	80027ea <__strtok_r+0x3a>
 80027fe:	2e00      	cmp	r6, #0
 8002800:	d0f1      	beq.n	80027e6 <__strtok_r+0x36>
 8002802:	2100      	movs	r1, #0
 8002804:	7021      	strb	r1, [r4, #0]
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e7d8      	b.n	80027bc <__strtok_r+0xc>
	...

0800280c <__swbuf_r>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	0005      	movs	r5, r0
 8002810:	000e      	movs	r6, r1
 8002812:	0014      	movs	r4, r2
 8002814:	2800      	cmp	r0, #0
 8002816:	d004      	beq.n	8002822 <__swbuf_r+0x16>
 8002818:	6983      	ldr	r3, [r0, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <__swbuf_r+0x16>
 800281e:	f000 f9b9 	bl	8002b94 <__sinit>
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <__swbuf_r+0xa0>)
 8002824:	429c      	cmp	r4, r3
 8002826:	d12d      	bne.n	8002884 <__swbuf_r+0x78>
 8002828:	686c      	ldr	r4, [r5, #4]
 800282a:	69a3      	ldr	r3, [r4, #24]
 800282c:	60a3      	str	r3, [r4, #8]
 800282e:	89a3      	ldrh	r3, [r4, #12]
 8002830:	071b      	lsls	r3, r3, #28
 8002832:	d531      	bpl.n	8002898 <__swbuf_r+0x8c>
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02e      	beq.n	8002898 <__swbuf_r+0x8c>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	6922      	ldr	r2, [r4, #16]
 800283e:	b2f7      	uxtb	r7, r6
 8002840:	1a98      	subs	r0, r3, r2
 8002842:	6963      	ldr	r3, [r4, #20]
 8002844:	b2f6      	uxtb	r6, r6
 8002846:	4283      	cmp	r3, r0
 8002848:	dc05      	bgt.n	8002856 <__swbuf_r+0x4a>
 800284a:	0021      	movs	r1, r4
 800284c:	0028      	movs	r0, r5
 800284e:	f000 f933 	bl	8002ab8 <_fflush_r>
 8002852:	2800      	cmp	r0, #0
 8002854:	d126      	bne.n	80028a4 <__swbuf_r+0x98>
 8002856:	68a3      	ldr	r3, [r4, #8]
 8002858:	3001      	adds	r0, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	60a3      	str	r3, [r4, #8]
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	6022      	str	r2, [r4, #0]
 8002864:	701f      	strb	r7, [r3, #0]
 8002866:	6963      	ldr	r3, [r4, #20]
 8002868:	4283      	cmp	r3, r0
 800286a:	d004      	beq.n	8002876 <__swbuf_r+0x6a>
 800286c:	89a3      	ldrh	r3, [r4, #12]
 800286e:	07db      	lsls	r3, r3, #31
 8002870:	d51a      	bpl.n	80028a8 <__swbuf_r+0x9c>
 8002872:	2e0a      	cmp	r6, #10
 8002874:	d118      	bne.n	80028a8 <__swbuf_r+0x9c>
 8002876:	0021      	movs	r1, r4
 8002878:	0028      	movs	r0, r5
 800287a:	f000 f91d 	bl	8002ab8 <_fflush_r>
 800287e:	2800      	cmp	r0, #0
 8002880:	d012      	beq.n	80028a8 <__swbuf_r+0x9c>
 8002882:	e00f      	b.n	80028a4 <__swbuf_r+0x98>
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <__swbuf_r+0xa4>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d101      	bne.n	800288e <__swbuf_r+0x82>
 800288a:	68ac      	ldr	r4, [r5, #8]
 800288c:	e7cd      	b.n	800282a <__swbuf_r+0x1e>
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <__swbuf_r+0xa8>)
 8002890:	429c      	cmp	r4, r3
 8002892:	d1ca      	bne.n	800282a <__swbuf_r+0x1e>
 8002894:	68ec      	ldr	r4, [r5, #12]
 8002896:	e7c8      	b.n	800282a <__swbuf_r+0x1e>
 8002898:	0021      	movs	r1, r4
 800289a:	0028      	movs	r0, r5
 800289c:	f000 f80c 	bl	80028b8 <__swsetup_r>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d0ca      	beq.n	800283a <__swbuf_r+0x2e>
 80028a4:	2601      	movs	r6, #1
 80028a6:	4276      	negs	r6, r6
 80028a8:	0030      	movs	r0, r6
 80028aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ac:	08003184 	.word	0x08003184
 80028b0:	080031a4 	.word	0x080031a4
 80028b4:	08003164 	.word	0x08003164

080028b8 <__swsetup_r>:
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <__swsetup_r+0xdc>)
 80028ba:	b570      	push	{r4, r5, r6, lr}
 80028bc:	681d      	ldr	r5, [r3, #0]
 80028be:	0006      	movs	r6, r0
 80028c0:	000c      	movs	r4, r1
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d005      	beq.n	80028d2 <__swsetup_r+0x1a>
 80028c6:	69ab      	ldr	r3, [r5, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <__swsetup_r+0x1a>
 80028cc:	0028      	movs	r0, r5
 80028ce:	f000 f961 	bl	8002b94 <__sinit>
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <__swsetup_r+0xe0>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d10f      	bne.n	80028f8 <__swsetup_r+0x40>
 80028d8:	686c      	ldr	r4, [r5, #4]
 80028da:	230c      	movs	r3, #12
 80028dc:	5ee2      	ldrsh	r2, [r4, r3]
 80028de:	b293      	uxth	r3, r2
 80028e0:	0719      	lsls	r1, r3, #28
 80028e2:	d42d      	bmi.n	8002940 <__swsetup_r+0x88>
 80028e4:	06d9      	lsls	r1, r3, #27
 80028e6:	d411      	bmi.n	800290c <__swsetup_r+0x54>
 80028e8:	2309      	movs	r3, #9
 80028ea:	2001      	movs	r0, #1
 80028ec:	6033      	str	r3, [r6, #0]
 80028ee:	3337      	adds	r3, #55	; 0x37
 80028f0:	4313      	orrs	r3, r2
 80028f2:	81a3      	strh	r3, [r4, #12]
 80028f4:	4240      	negs	r0, r0
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <__swsetup_r+0xe4>)
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d101      	bne.n	8002902 <__swsetup_r+0x4a>
 80028fe:	68ac      	ldr	r4, [r5, #8]
 8002900:	e7eb      	b.n	80028da <__swsetup_r+0x22>
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <__swsetup_r+0xe8>)
 8002904:	429c      	cmp	r4, r3
 8002906:	d1e8      	bne.n	80028da <__swsetup_r+0x22>
 8002908:	68ec      	ldr	r4, [r5, #12]
 800290a:	e7e6      	b.n	80028da <__swsetup_r+0x22>
 800290c:	075b      	lsls	r3, r3, #29
 800290e:	d513      	bpl.n	8002938 <__swsetup_r+0x80>
 8002910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002912:	2900      	cmp	r1, #0
 8002914:	d008      	beq.n	8002928 <__swsetup_r+0x70>
 8002916:	0023      	movs	r3, r4
 8002918:	3344      	adds	r3, #68	; 0x44
 800291a:	4299      	cmp	r1, r3
 800291c:	d002      	beq.n	8002924 <__swsetup_r+0x6c>
 800291e:	0030      	movs	r0, r6
 8002920:	f000 fa62 	bl	8002de8 <_free_r>
 8002924:	2300      	movs	r3, #0
 8002926:	6363      	str	r3, [r4, #52]	; 0x34
 8002928:	2224      	movs	r2, #36	; 0x24
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	4393      	bics	r3, r2
 800292e:	81a3      	strh	r3, [r4, #12]
 8002930:	2300      	movs	r3, #0
 8002932:	6063      	str	r3, [r4, #4]
 8002934:	6923      	ldr	r3, [r4, #16]
 8002936:	6023      	str	r3, [r4, #0]
 8002938:	2308      	movs	r3, #8
 800293a:	89a2      	ldrh	r2, [r4, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	81a3      	strh	r3, [r4, #12]
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <__swsetup_r+0xa6>
 8002946:	21a0      	movs	r1, #160	; 0xa0
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	0089      	lsls	r1, r1, #2
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	400b      	ands	r3, r1
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <__swsetup_r+0xa6>
 8002956:	0021      	movs	r1, r4
 8002958:	0030      	movs	r0, r6
 800295a:	f000 f9e5 	bl	8002d28 <__smakebuf_r>
 800295e:	2301      	movs	r3, #1
 8002960:	89a2      	ldrh	r2, [r4, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	d011      	beq.n	800298a <__swsetup_r+0xd2>
 8002966:	2300      	movs	r3, #0
 8002968:	60a3      	str	r3, [r4, #8]
 800296a:	6963      	ldr	r3, [r4, #20]
 800296c:	425b      	negs	r3, r3
 800296e:	61a3      	str	r3, [r4, #24]
 8002970:	2000      	movs	r0, #0
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	4283      	cmp	r3, r0
 8002976:	d1be      	bne.n	80028f6 <__swsetup_r+0x3e>
 8002978:	230c      	movs	r3, #12
 800297a:	5ee2      	ldrsh	r2, [r4, r3]
 800297c:	0613      	lsls	r3, r2, #24
 800297e:	d5ba      	bpl.n	80028f6 <__swsetup_r+0x3e>
 8002980:	2340      	movs	r3, #64	; 0x40
 8002982:	4313      	orrs	r3, r2
 8002984:	81a3      	strh	r3, [r4, #12]
 8002986:	3801      	subs	r0, #1
 8002988:	e7b5      	b.n	80028f6 <__swsetup_r+0x3e>
 800298a:	0792      	lsls	r2, r2, #30
 800298c:	d400      	bmi.n	8002990 <__swsetup_r+0xd8>
 800298e:	6963      	ldr	r3, [r4, #20]
 8002990:	60a3      	str	r3, [r4, #8]
 8002992:	e7ed      	b.n	8002970 <__swsetup_r+0xb8>
 8002994:	2000000c 	.word	0x2000000c
 8002998:	08003184 	.word	0x08003184
 800299c:	080031a4 	.word	0x080031a4
 80029a0:	08003164 	.word	0x08003164

080029a4 <__sflush_r>:
 80029a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029a6:	898a      	ldrh	r2, [r1, #12]
 80029a8:	0005      	movs	r5, r0
 80029aa:	000c      	movs	r4, r1
 80029ac:	0713      	lsls	r3, r2, #28
 80029ae:	d460      	bmi.n	8002a72 <__sflush_r+0xce>
 80029b0:	684b      	ldr	r3, [r1, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	dc04      	bgt.n	80029c0 <__sflush_r+0x1c>
 80029b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	dc01      	bgt.n	80029c0 <__sflush_r+0x1c>
 80029bc:	2000      	movs	r0, #0
 80029be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80029c2:	2f00      	cmp	r7, #0
 80029c4:	d0fa      	beq.n	80029bc <__sflush_r+0x18>
 80029c6:	2300      	movs	r3, #0
 80029c8:	682e      	ldr	r6, [r5, #0]
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	6a21      	ldr	r1, [r4, #32]
 80029d2:	401a      	ands	r2, r3
 80029d4:	d034      	beq.n	8002a40 <__sflush_r+0x9c>
 80029d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029d8:	89a3      	ldrh	r3, [r4, #12]
 80029da:	075b      	lsls	r3, r3, #29
 80029dc:	d506      	bpl.n	80029ec <__sflush_r+0x48>
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	1ac0      	subs	r0, r0, r3
 80029e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <__sflush_r+0x48>
 80029e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ea:	1ac0      	subs	r0, r0, r3
 80029ec:	0002      	movs	r2, r0
 80029ee:	6a21      	ldr	r1, [r4, #32]
 80029f0:	2300      	movs	r3, #0
 80029f2:	0028      	movs	r0, r5
 80029f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80029f6:	47b8      	blx	r7
 80029f8:	89a1      	ldrh	r1, [r4, #12]
 80029fa:	1c43      	adds	r3, r0, #1
 80029fc:	d106      	bne.n	8002a0c <__sflush_r+0x68>
 80029fe:	682b      	ldr	r3, [r5, #0]
 8002a00:	2b1d      	cmp	r3, #29
 8002a02:	d830      	bhi.n	8002a66 <__sflush_r+0xc2>
 8002a04:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <__sflush_r+0x110>)
 8002a06:	40da      	lsrs	r2, r3
 8002a08:	07d3      	lsls	r3, r2, #31
 8002a0a:	d52c      	bpl.n	8002a66 <__sflush_r+0xc2>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6063      	str	r3, [r4, #4]
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	04cb      	lsls	r3, r1, #19
 8002a16:	d505      	bpl.n	8002a24 <__sflush_r+0x80>
 8002a18:	1c43      	adds	r3, r0, #1
 8002a1a:	d102      	bne.n	8002a22 <__sflush_r+0x7e>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d100      	bne.n	8002a24 <__sflush_r+0x80>
 8002a22:	6560      	str	r0, [r4, #84]	; 0x54
 8002a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a26:	602e      	str	r6, [r5, #0]
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d0c7      	beq.n	80029bc <__sflush_r+0x18>
 8002a2c:	0023      	movs	r3, r4
 8002a2e:	3344      	adds	r3, #68	; 0x44
 8002a30:	4299      	cmp	r1, r3
 8002a32:	d002      	beq.n	8002a3a <__sflush_r+0x96>
 8002a34:	0028      	movs	r0, r5
 8002a36:	f000 f9d7 	bl	8002de8 <_free_r>
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8002a3e:	e7be      	b.n	80029be <__sflush_r+0x1a>
 8002a40:	2301      	movs	r3, #1
 8002a42:	0028      	movs	r0, r5
 8002a44:	47b8      	blx	r7
 8002a46:	1c43      	adds	r3, r0, #1
 8002a48:	d1c6      	bne.n	80029d8 <__sflush_r+0x34>
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0c3      	beq.n	80029d8 <__sflush_r+0x34>
 8002a50:	2b1d      	cmp	r3, #29
 8002a52:	d001      	beq.n	8002a58 <__sflush_r+0xb4>
 8002a54:	2b16      	cmp	r3, #22
 8002a56:	d101      	bne.n	8002a5c <__sflush_r+0xb8>
 8002a58:	602e      	str	r6, [r5, #0]
 8002a5a:	e7af      	b.n	80029bc <__sflush_r+0x18>
 8002a5c:	2340      	movs	r3, #64	; 0x40
 8002a5e:	89a2      	ldrh	r2, [r4, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	81a3      	strh	r3, [r4, #12]
 8002a64:	e7ab      	b.n	80029be <__sflush_r+0x1a>
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	81a3      	strh	r3, [r4, #12]
 8002a6e:	4240      	negs	r0, r0
 8002a70:	e7a5      	b.n	80029be <__sflush_r+0x1a>
 8002a72:	690f      	ldr	r7, [r1, #16]
 8002a74:	2f00      	cmp	r7, #0
 8002a76:	d0a1      	beq.n	80029bc <__sflush_r+0x18>
 8002a78:	680b      	ldr	r3, [r1, #0]
 8002a7a:	600f      	str	r7, [r1, #0]
 8002a7c:	1bdb      	subs	r3, r3, r7
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2300      	movs	r3, #0
 8002a82:	0792      	lsls	r2, r2, #30
 8002a84:	d100      	bne.n	8002a88 <__sflush_r+0xe4>
 8002a86:	694b      	ldr	r3, [r1, #20]
 8002a88:	60a3      	str	r3, [r4, #8]
 8002a8a:	9b01      	ldr	r3, [sp, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	dc00      	bgt.n	8002a92 <__sflush_r+0xee>
 8002a90:	e794      	b.n	80029bc <__sflush_r+0x18>
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	003a      	movs	r2, r7
 8002a96:	6a21      	ldr	r1, [r4, #32]
 8002a98:	0028      	movs	r0, r5
 8002a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a9c:	47b0      	blx	r6
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	dc03      	bgt.n	8002aaa <__sflush_r+0x106>
 8002aa2:	2340      	movs	r3, #64	; 0x40
 8002aa4:	89a2      	ldrh	r2, [r4, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	e7df      	b.n	8002a6a <__sflush_r+0xc6>
 8002aaa:	9b01      	ldr	r3, [sp, #4]
 8002aac:	183f      	adds	r7, r7, r0
 8002aae:	1a1b      	subs	r3, r3, r0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	e7ea      	b.n	8002a8a <__sflush_r+0xe6>
 8002ab4:	20400001 	.word	0x20400001

08002ab8 <_fflush_r>:
 8002ab8:	690b      	ldr	r3, [r1, #16]
 8002aba:	b570      	push	{r4, r5, r6, lr}
 8002abc:	0005      	movs	r5, r0
 8002abe:	000c      	movs	r4, r1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <_fflush_r+0x10>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d004      	beq.n	8002ad6 <_fflush_r+0x1e>
 8002acc:	6983      	ldr	r3, [r0, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <_fflush_r+0x1e>
 8002ad2:	f000 f85f 	bl	8002b94 <__sinit>
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <_fflush_r+0x4c>)
 8002ad8:	429c      	cmp	r4, r3
 8002ada:	d109      	bne.n	8002af0 <_fflush_r+0x38>
 8002adc:	686c      	ldr	r4, [r5, #4]
 8002ade:	220c      	movs	r2, #12
 8002ae0:	5ea3      	ldrsh	r3, [r4, r2]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ee      	beq.n	8002ac4 <_fflush_r+0xc>
 8002ae6:	0021      	movs	r1, r4
 8002ae8:	0028      	movs	r0, r5
 8002aea:	f7ff ff5b 	bl	80029a4 <__sflush_r>
 8002aee:	e7ea      	b.n	8002ac6 <_fflush_r+0xe>
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <_fflush_r+0x50>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d101      	bne.n	8002afa <_fflush_r+0x42>
 8002af6:	68ac      	ldr	r4, [r5, #8]
 8002af8:	e7f1      	b.n	8002ade <_fflush_r+0x26>
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <_fflush_r+0x54>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d1ee      	bne.n	8002ade <_fflush_r+0x26>
 8002b00:	68ec      	ldr	r4, [r5, #12]
 8002b02:	e7ec      	b.n	8002ade <_fflush_r+0x26>
 8002b04:	08003184 	.word	0x08003184
 8002b08:	080031a4 	.word	0x080031a4
 8002b0c:	08003164 	.word	0x08003164

08002b10 <std>:
 8002b10:	2300      	movs	r3, #0
 8002b12:	b510      	push	{r4, lr}
 8002b14:	0004      	movs	r4, r0
 8002b16:	6003      	str	r3, [r0, #0]
 8002b18:	6043      	str	r3, [r0, #4]
 8002b1a:	6083      	str	r3, [r0, #8]
 8002b1c:	8181      	strh	r1, [r0, #12]
 8002b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8002b20:	81c2      	strh	r2, [r0, #14]
 8002b22:	6103      	str	r3, [r0, #16]
 8002b24:	6143      	str	r3, [r0, #20]
 8002b26:	6183      	str	r3, [r0, #24]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	305c      	adds	r0, #92	; 0x5c
 8002b2e:	f7ff fd87 	bl	8002640 <memset>
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <std+0x38>)
 8002b34:	6224      	str	r4, [r4, #32]
 8002b36:	6263      	str	r3, [r4, #36]	; 0x24
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <std+0x3c>)
 8002b3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <std+0x40>)
 8002b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <std+0x44>)
 8002b42:	6323      	str	r3, [r4, #48]	; 0x30
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	08002f5d 	.word	0x08002f5d
 8002b4c:	08002f85 	.word	0x08002f85
 8002b50:	08002fbd 	.word	0x08002fbd
 8002b54:	08002fe9 	.word	0x08002fe9

08002b58 <_cleanup_r>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4902      	ldr	r1, [pc, #8]	; (8002b64 <_cleanup_r+0xc>)
 8002b5c:	f000 f88c 	bl	8002c78 <_fwalk_reent>
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	08002ab9 	.word	0x08002ab9

08002b68 <__sfmoreglue>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2568      	movs	r5, #104	; 0x68
 8002b6c:	1e4a      	subs	r2, r1, #1
 8002b6e:	4355      	muls	r5, r2
 8002b70:	000e      	movs	r6, r1
 8002b72:	0029      	movs	r1, r5
 8002b74:	3174      	adds	r1, #116	; 0x74
 8002b76:	f000 f981 	bl	8002e7c <_malloc_r>
 8002b7a:	1e04      	subs	r4, r0, #0
 8002b7c:	d008      	beq.n	8002b90 <__sfmoreglue+0x28>
 8002b7e:	2100      	movs	r1, #0
 8002b80:	002a      	movs	r2, r5
 8002b82:	6001      	str	r1, [r0, #0]
 8002b84:	6046      	str	r6, [r0, #4]
 8002b86:	300c      	adds	r0, #12
 8002b88:	60a0      	str	r0, [r4, #8]
 8002b8a:	3268      	adds	r2, #104	; 0x68
 8002b8c:	f7ff fd58 	bl	8002640 <memset>
 8002b90:	0020      	movs	r0, r4
 8002b92:	bd70      	pop	{r4, r5, r6, pc}

08002b94 <__sinit>:
 8002b94:	6983      	ldr	r3, [r0, #24]
 8002b96:	b513      	push	{r0, r1, r4, lr}
 8002b98:	0004      	movs	r4, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d128      	bne.n	8002bf0 <__sinit+0x5c>
 8002b9e:	6483      	str	r3, [r0, #72]	; 0x48
 8002ba0:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002ba2:	6503      	str	r3, [r0, #80]	; 0x50
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <__sinit+0x60>)
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <__sinit+0x64>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6282      	str	r2, [r0, #40]	; 0x28
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d101      	bne.n	8002bb6 <__sinit+0x22>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6183      	str	r3, [r0, #24]
 8002bb6:	0020      	movs	r0, r4
 8002bb8:	f000 f820 	bl	8002bfc <__sfp>
 8002bbc:	6060      	str	r0, [r4, #4]
 8002bbe:	0020      	movs	r0, r4
 8002bc0:	f000 f81c 	bl	8002bfc <__sfp>
 8002bc4:	60a0      	str	r0, [r4, #8]
 8002bc6:	0020      	movs	r0, r4
 8002bc8:	f000 f818 	bl	8002bfc <__sfp>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60e0      	str	r0, [r4, #12]
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	6860      	ldr	r0, [r4, #4]
 8002bd4:	f7ff ff9c 	bl	8002b10 <std>
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2109      	movs	r1, #9
 8002bdc:	68a0      	ldr	r0, [r4, #8]
 8002bde:	f7ff ff97 	bl	8002b10 <std>
 8002be2:	2202      	movs	r2, #2
 8002be4:	2112      	movs	r1, #18
 8002be6:	68e0      	ldr	r0, [r4, #12]
 8002be8:	f7ff ff92 	bl	8002b10 <std>
 8002bec:	2301      	movs	r3, #1
 8002bee:	61a3      	str	r3, [r4, #24]
 8002bf0:	bd13      	pop	{r0, r1, r4, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	08003160 	.word	0x08003160
 8002bf8:	08002b59 	.word	0x08002b59

08002bfc <__sfp>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <__sfp+0x74>)
 8002c00:	0007      	movs	r7, r0
 8002c02:	681e      	ldr	r6, [r3, #0]
 8002c04:	69b3      	ldr	r3, [r6, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <__sfp+0x14>
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f7ff ffc2 	bl	8002b94 <__sinit>
 8002c10:	3648      	adds	r6, #72	; 0x48
 8002c12:	68b4      	ldr	r4, [r6, #8]
 8002c14:	6873      	ldr	r3, [r6, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	d504      	bpl.n	8002c24 <__sfp+0x28>
 8002c1a:	6833      	ldr	r3, [r6, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <__sfp+0x34>
 8002c20:	6836      	ldr	r6, [r6, #0]
 8002c22:	e7f6      	b.n	8002c12 <__sfp+0x16>
 8002c24:	220c      	movs	r2, #12
 8002c26:	5ea5      	ldrsh	r5, [r4, r2]
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	d00d      	beq.n	8002c48 <__sfp+0x4c>
 8002c2c:	3468      	adds	r4, #104	; 0x68
 8002c2e:	e7f2      	b.n	8002c16 <__sfp+0x1a>
 8002c30:	2104      	movs	r1, #4
 8002c32:	0038      	movs	r0, r7
 8002c34:	f7ff ff98 	bl	8002b68 <__sfmoreglue>
 8002c38:	6030      	str	r0, [r6, #0]
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d1f0      	bne.n	8002c20 <__sfp+0x24>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	0004      	movs	r4, r0
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	0020      	movs	r0, r4
 8002c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c48:	0020      	movs	r0, r4
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <__sfp+0x78>)
 8002c4c:	6665      	str	r5, [r4, #100]	; 0x64
 8002c4e:	6025      	str	r5, [r4, #0]
 8002c50:	6065      	str	r5, [r4, #4]
 8002c52:	60a5      	str	r5, [r4, #8]
 8002c54:	60e3      	str	r3, [r4, #12]
 8002c56:	6125      	str	r5, [r4, #16]
 8002c58:	6165      	str	r5, [r4, #20]
 8002c5a:	61a5      	str	r5, [r4, #24]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	0029      	movs	r1, r5
 8002c60:	305c      	adds	r0, #92	; 0x5c
 8002c62:	f7ff fced 	bl	8002640 <memset>
 8002c66:	6365      	str	r5, [r4, #52]	; 0x34
 8002c68:	63a5      	str	r5, [r4, #56]	; 0x38
 8002c6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002c6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002c6e:	e7e9      	b.n	8002c44 <__sfp+0x48>
 8002c70:	08003160 	.word	0x08003160
 8002c74:	ffff0001 	.word	0xffff0001

08002c78 <_fwalk_reent>:
 8002c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c7a:	0004      	movs	r4, r0
 8002c7c:	0007      	movs	r7, r0
 8002c7e:	2600      	movs	r6, #0
 8002c80:	9101      	str	r1, [sp, #4]
 8002c82:	3448      	adds	r4, #72	; 0x48
 8002c84:	2c00      	cmp	r4, #0
 8002c86:	d101      	bne.n	8002c8c <_fwalk_reent+0x14>
 8002c88:	0030      	movs	r0, r6
 8002c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c8c:	6863      	ldr	r3, [r4, #4]
 8002c8e:	68a5      	ldr	r5, [r4, #8]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	9b00      	ldr	r3, [sp, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	d501      	bpl.n	8002c9e <_fwalk_reent+0x26>
 8002c9a:	6824      	ldr	r4, [r4, #0]
 8002c9c:	e7f2      	b.n	8002c84 <_fwalk_reent+0xc>
 8002c9e:	89ab      	ldrh	r3, [r5, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d908      	bls.n	8002cb6 <_fwalk_reent+0x3e>
 8002ca4:	220e      	movs	r2, #14
 8002ca6:	5eab      	ldrsh	r3, [r5, r2]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	d004      	beq.n	8002cb6 <_fwalk_reent+0x3e>
 8002cac:	0029      	movs	r1, r5
 8002cae:	0038      	movs	r0, r7
 8002cb0:	9b01      	ldr	r3, [sp, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	4306      	orrs	r6, r0
 8002cb6:	3568      	adds	r5, #104	; 0x68
 8002cb8:	e7eb      	b.n	8002c92 <_fwalk_reent+0x1a>
	...

08002cbc <__locale_ctype_ptr>:
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__locale_ctype_ptr+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d100      	bne.n	8002cc8 <__locale_ctype_ptr+0xc>
 8002cc6:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <__locale_ctype_ptr+0x18>)
 8002cc8:	33ec      	adds	r3, #236	; 0xec
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	20000070 	.word	0x20000070

08002cd8 <__swhatbuf_r>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	000e      	movs	r6, r1
 8002cdc:	001d      	movs	r5, r3
 8002cde:	230e      	movs	r3, #14
 8002ce0:	5ec9      	ldrsh	r1, [r1, r3]
 8002ce2:	b096      	sub	sp, #88	; 0x58
 8002ce4:	0014      	movs	r4, r2
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	da07      	bge.n	8002cfa <__swhatbuf_r+0x22>
 8002cea:	2300      	movs	r3, #0
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	89b3      	ldrh	r3, [r6, #12]
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	d411      	bmi.n	8002d18 <__swhatbuf_r+0x40>
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	e00f      	b.n	8002d1a <__swhatbuf_r+0x42>
 8002cfa:	466a      	mov	r2, sp
 8002cfc:	f000 f9ac 	bl	8003058 <_fstat_r>
 8002d00:	2800      	cmp	r0, #0
 8002d02:	dbf2      	blt.n	8002cea <__swhatbuf_r+0x12>
 8002d04:	22f0      	movs	r2, #240	; 0xf0
 8002d06:	9b01      	ldr	r3, [sp, #4]
 8002d08:	0212      	lsls	r2, r2, #8
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <__swhatbuf_r+0x4c>)
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	425a      	negs	r2, r3
 8002d12:	4153      	adcs	r3, r2
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	e7ed      	b.n	8002cf4 <__swhatbuf_r+0x1c>
 8002d18:	2340      	movs	r3, #64	; 0x40
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	b016      	add	sp, #88	; 0x58
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	ffffe000 	.word	0xffffe000

08002d28 <__smakebuf_r>:
 8002d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d2a:	2602      	movs	r6, #2
 8002d2c:	898b      	ldrh	r3, [r1, #12]
 8002d2e:	0005      	movs	r5, r0
 8002d30:	000c      	movs	r4, r1
 8002d32:	4233      	tst	r3, r6
 8002d34:	d006      	beq.n	8002d44 <__smakebuf_r+0x1c>
 8002d36:	0023      	movs	r3, r4
 8002d38:	3347      	adds	r3, #71	; 0x47
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	6123      	str	r3, [r4, #16]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	6163      	str	r3, [r4, #20]
 8002d42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002d44:	ab01      	add	r3, sp, #4
 8002d46:	466a      	mov	r2, sp
 8002d48:	f7ff ffc6 	bl	8002cd8 <__swhatbuf_r>
 8002d4c:	9900      	ldr	r1, [sp, #0]
 8002d4e:	0007      	movs	r7, r0
 8002d50:	0028      	movs	r0, r5
 8002d52:	f000 f893 	bl	8002e7c <_malloc_r>
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d108      	bne.n	8002d6c <__smakebuf_r+0x44>
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	5ea3      	ldrsh	r3, [r4, r2]
 8002d5e:	059a      	lsls	r2, r3, #22
 8002d60:	d4ef      	bmi.n	8002d42 <__smakebuf_r+0x1a>
 8002d62:	2203      	movs	r2, #3
 8002d64:	4393      	bics	r3, r2
 8002d66:	431e      	orrs	r6, r3
 8002d68:	81a6      	strh	r6, [r4, #12]
 8002d6a:	e7e4      	b.n	8002d36 <__smakebuf_r+0xe>
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <__smakebuf_r+0x84>)
 8002d6e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	89a2      	ldrh	r2, [r4, #12]
 8002d74:	6020      	str	r0, [r4, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	9b00      	ldr	r3, [sp, #0]
 8002d7c:	6120      	str	r0, [r4, #16]
 8002d7e:	6163      	str	r3, [r4, #20]
 8002d80:	9b01      	ldr	r3, [sp, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <__smakebuf_r+0x7a>
 8002d86:	230e      	movs	r3, #14
 8002d88:	5ee1      	ldrsh	r1, [r4, r3]
 8002d8a:	0028      	movs	r0, r5
 8002d8c:	f000 f976 	bl	800307c <_isatty_r>
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d006      	beq.n	8002da2 <__smakebuf_r+0x7a>
 8002d94:	2203      	movs	r2, #3
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	4393      	bics	r3, r2
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	81a3      	strh	r3, [r4, #12]
 8002da2:	89a0      	ldrh	r0, [r4, #12]
 8002da4:	4338      	orrs	r0, r7
 8002da6:	81a0      	strh	r0, [r4, #12]
 8002da8:	e7cb      	b.n	8002d42 <__smakebuf_r+0x1a>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	08002b59 	.word	0x08002b59

08002db0 <malloc>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <malloc+0x10>)
 8002db4:	0001      	movs	r1, r0
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	f000 f860 	bl	8002e7c <_malloc_r>
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <__ascii_mbtowc>:
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	2900      	cmp	r1, #0
 8002dc8:	d100      	bne.n	8002dcc <__ascii_mbtowc+0x8>
 8002dca:	a901      	add	r1, sp, #4
 8002dcc:	1e10      	subs	r0, r2, #0
 8002dce:	d006      	beq.n	8002dde <__ascii_mbtowc+0x1a>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <__ascii_mbtowc+0x1e>
 8002dd4:	7813      	ldrb	r3, [r2, #0]
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	7810      	ldrb	r0, [r2, #0]
 8002dda:	1e43      	subs	r3, r0, #1
 8002ddc:	4198      	sbcs	r0, r3
 8002dde:	b002      	add	sp, #8
 8002de0:	4770      	bx	lr
 8002de2:	2002      	movs	r0, #2
 8002de4:	4240      	negs	r0, r0
 8002de6:	e7fa      	b.n	8002dde <__ascii_mbtowc+0x1a>

08002de8 <_free_r>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	0005      	movs	r5, r0
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d010      	beq.n	8002e12 <_free_r+0x2a>
 8002df0:	1f0c      	subs	r4, r1, #4
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da00      	bge.n	8002dfa <_free_r+0x12>
 8002df8:	18e4      	adds	r4, r4, r3
 8002dfa:	0028      	movs	r0, r5
 8002dfc:	f000 f964 	bl	80030c8 <__malloc_lock>
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <_free_r+0x90>)
 8002e02:	6813      	ldr	r3, [r2, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <_free_r+0x2c>
 8002e08:	6063      	str	r3, [r4, #4]
 8002e0a:	6014      	str	r4, [r2, #0]
 8002e0c:	0028      	movs	r0, r5
 8002e0e:	f000 f95c 	bl	80030ca <__malloc_unlock>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	42a3      	cmp	r3, r4
 8002e16:	d909      	bls.n	8002e2c <_free_r+0x44>
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	1860      	adds	r0, r4, r1
 8002e1c:	4283      	cmp	r3, r0
 8002e1e:	d1f3      	bne.n	8002e08 <_free_r+0x20>
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	1841      	adds	r1, r0, r1
 8002e26:	6021      	str	r1, [r4, #0]
 8002e28:	e7ee      	b.n	8002e08 <_free_r+0x20>
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d001      	beq.n	8002e36 <_free_r+0x4e>
 8002e32:	42a2      	cmp	r2, r4
 8002e34:	d9f9      	bls.n	8002e2a <_free_r+0x42>
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	1858      	adds	r0, r3, r1
 8002e3a:	42a0      	cmp	r0, r4
 8002e3c:	d10b      	bne.n	8002e56 <_free_r+0x6e>
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	1809      	adds	r1, r1, r0
 8002e42:	1858      	adds	r0, r3, r1
 8002e44:	6019      	str	r1, [r3, #0]
 8002e46:	4282      	cmp	r2, r0
 8002e48:	d1e0      	bne.n	8002e0c <_free_r+0x24>
 8002e4a:	6810      	ldr	r0, [r2, #0]
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	1841      	adds	r1, r0, r1
 8002e50:	6019      	str	r1, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	e7da      	b.n	8002e0c <_free_r+0x24>
 8002e56:	42a0      	cmp	r0, r4
 8002e58:	d902      	bls.n	8002e60 <_free_r+0x78>
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	e7d5      	b.n	8002e0c <_free_r+0x24>
 8002e60:	6821      	ldr	r1, [r4, #0]
 8002e62:	1860      	adds	r0, r4, r1
 8002e64:	4282      	cmp	r2, r0
 8002e66:	d103      	bne.n	8002e70 <_free_r+0x88>
 8002e68:	6810      	ldr	r0, [r2, #0]
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	1841      	adds	r1, r0, r1
 8002e6e:	6021      	str	r1, [r4, #0]
 8002e70:	6062      	str	r2, [r4, #4]
 8002e72:	605c      	str	r4, [r3, #4]
 8002e74:	e7ca      	b.n	8002e0c <_free_r+0x24>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	20000340 	.word	0x20000340

08002e7c <_malloc_r>:
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	b570      	push	{r4, r5, r6, lr}
 8002e80:	1ccd      	adds	r5, r1, #3
 8002e82:	439d      	bics	r5, r3
 8002e84:	3508      	adds	r5, #8
 8002e86:	0006      	movs	r6, r0
 8002e88:	2d0c      	cmp	r5, #12
 8002e8a:	d21e      	bcs.n	8002eca <_malloc_r+0x4e>
 8002e8c:	250c      	movs	r5, #12
 8002e8e:	42a9      	cmp	r1, r5
 8002e90:	d81d      	bhi.n	8002ece <_malloc_r+0x52>
 8002e92:	0030      	movs	r0, r6
 8002e94:	f000 f918 	bl	80030c8 <__malloc_lock>
 8002e98:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <_malloc_r+0xb4>)
 8002e9a:	6814      	ldr	r4, [r2, #0]
 8002e9c:	0021      	movs	r1, r4
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d119      	bne.n	8002ed6 <_malloc_r+0x5a>
 8002ea2:	4c24      	ldr	r4, [pc, #144]	; (8002f34 <_malloc_r+0xb8>)
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <_malloc_r+0x36>
 8002eaa:	0030      	movs	r0, r6
 8002eac:	f000 f844 	bl	8002f38 <_sbrk_r>
 8002eb0:	6020      	str	r0, [r4, #0]
 8002eb2:	0029      	movs	r1, r5
 8002eb4:	0030      	movs	r0, r6
 8002eb6:	f000 f83f 	bl	8002f38 <_sbrk_r>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	d12b      	bne.n	8002f16 <_malloc_r+0x9a>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	0030      	movs	r0, r6
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	f000 f901 	bl	80030ca <__malloc_unlock>
 8002ec8:	e003      	b.n	8002ed2 <_malloc_r+0x56>
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	dadf      	bge.n	8002e8e <_malloc_r+0x12>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	680b      	ldr	r3, [r1, #0]
 8002ed8:	1b5b      	subs	r3, r3, r5
 8002eda:	d419      	bmi.n	8002f10 <_malloc_r+0x94>
 8002edc:	2b0b      	cmp	r3, #11
 8002ede:	d903      	bls.n	8002ee8 <_malloc_r+0x6c>
 8002ee0:	600b      	str	r3, [r1, #0]
 8002ee2:	18cc      	adds	r4, r1, r3
 8002ee4:	6025      	str	r5, [r4, #0]
 8002ee6:	e003      	b.n	8002ef0 <_malloc_r+0x74>
 8002ee8:	684b      	ldr	r3, [r1, #4]
 8002eea:	428c      	cmp	r4, r1
 8002eec:	d10d      	bne.n	8002f0a <_malloc_r+0x8e>
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	0030      	movs	r0, r6
 8002ef2:	f000 f8ea 	bl	80030ca <__malloc_unlock>
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	2207      	movs	r2, #7
 8002efa:	300b      	adds	r0, #11
 8002efc:	1d23      	adds	r3, r4, #4
 8002efe:	4390      	bics	r0, r2
 8002f00:	1ac3      	subs	r3, r0, r3
 8002f02:	d0e7      	beq.n	8002ed4 <_malloc_r+0x58>
 8002f04:	425a      	negs	r2, r3
 8002f06:	50e2      	str	r2, [r4, r3]
 8002f08:	e7e4      	b.n	8002ed4 <_malloc_r+0x58>
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	000c      	movs	r4, r1
 8002f0e:	e7ef      	b.n	8002ef0 <_malloc_r+0x74>
 8002f10:	000c      	movs	r4, r1
 8002f12:	6849      	ldr	r1, [r1, #4]
 8002f14:	e7c3      	b.n	8002e9e <_malloc_r+0x22>
 8002f16:	2303      	movs	r3, #3
 8002f18:	1cc4      	adds	r4, r0, #3
 8002f1a:	439c      	bics	r4, r3
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d0e1      	beq.n	8002ee4 <_malloc_r+0x68>
 8002f20:	1a21      	subs	r1, r4, r0
 8002f22:	0030      	movs	r0, r6
 8002f24:	f000 f808 	bl	8002f38 <_sbrk_r>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d1db      	bne.n	8002ee4 <_malloc_r+0x68>
 8002f2c:	e7c7      	b.n	8002ebe <_malloc_r+0x42>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	20000340 	.word	0x20000340
 8002f34:	20000344 	.word	0x20000344

08002f38 <_sbrk_r>:
 8002f38:	2300      	movs	r3, #0
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	4c06      	ldr	r4, [pc, #24]	; (8002f58 <_sbrk_r+0x20>)
 8002f3e:	0005      	movs	r5, r0
 8002f40:	0008      	movs	r0, r1
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	f7fd fcc0 	bl	80008c8 <_sbrk>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_sbrk_r+0x1c>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <_sbrk_r+0x1c>
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000410 	.word	0x20000410

08002f5c <__sread>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	000c      	movs	r4, r1
 8002f60:	250e      	movs	r5, #14
 8002f62:	5f49      	ldrsh	r1, [r1, r5]
 8002f64:	f000 f8b2 	bl	80030cc <_read_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	db03      	blt.n	8002f74 <__sread+0x18>
 8002f6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f6e:	181b      	adds	r3, r3, r0
 8002f70:	6563      	str	r3, [r4, #84]	; 0x54
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	4a02      	ldr	r2, [pc, #8]	; (8002f80 <__sread+0x24>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	e7f9      	b.n	8002f72 <__sread+0x16>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	ffffefff 	.word	0xffffefff

08002f84 <__swrite>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	001f      	movs	r7, r3
 8002f88:	898b      	ldrh	r3, [r1, #12]
 8002f8a:	0005      	movs	r5, r0
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	0016      	movs	r6, r2
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	d505      	bpl.n	8002fa0 <__swrite+0x1c>
 8002f94:	230e      	movs	r3, #14
 8002f96:	5ec9      	ldrsh	r1, [r1, r3]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f000 f880 	bl	80030a0 <_lseek_r>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <__swrite+0x34>)
 8002fa4:	0028      	movs	r0, r5
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	0032      	movs	r2, r6
 8002fac:	230e      	movs	r3, #14
 8002fae:	5ee1      	ldrsh	r1, [r4, r3]
 8002fb0:	003b      	movs	r3, r7
 8002fb2:	f000 f82b 	bl	800300c <_write_r>
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb8:	ffffefff 	.word	0xffffefff

08002fbc <__sseek>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	000c      	movs	r4, r1
 8002fc0:	250e      	movs	r5, #14
 8002fc2:	5f49      	ldrsh	r1, [r1, r5]
 8002fc4:	f000 f86c 	bl	80030a0 <_lseek_r>
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	1c42      	adds	r2, r0, #1
 8002fcc:	d103      	bne.n	8002fd6 <__sseek+0x1a>
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <__sseek+0x28>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	81a3      	strh	r3, [r4, #12]
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	0152      	lsls	r2, r2, #5
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe0:	e7f8      	b.n	8002fd4 <__sseek+0x18>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	ffffefff 	.word	0xffffefff

08002fe8 <__sclose>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	230e      	movs	r3, #14
 8002fec:	5ec9      	ldrsh	r1, [r1, r3]
 8002fee:	f000 f821 	bl	8003034 <_close_r>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <__ascii_wctomb>:
 8002ff4:	1e0b      	subs	r3, r1, #0
 8002ff6:	d004      	beq.n	8003002 <__ascii_wctomb+0xe>
 8002ff8:	2aff      	cmp	r2, #255	; 0xff
 8002ffa:	d904      	bls.n	8003006 <__ascii_wctomb+0x12>
 8002ffc:	238a      	movs	r3, #138	; 0x8a
 8002ffe:	6003      	str	r3, [r0, #0]
 8003000:	3b8b      	subs	r3, #139	; 0x8b
 8003002:	0018      	movs	r0, r3
 8003004:	4770      	bx	lr
 8003006:	700a      	strb	r2, [r1, #0]
 8003008:	2301      	movs	r3, #1
 800300a:	e7fa      	b.n	8003002 <__ascii_wctomb+0xe>

0800300c <_write_r>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	0005      	movs	r5, r0
 8003010:	0008      	movs	r0, r1
 8003012:	0011      	movs	r1, r2
 8003014:	2200      	movs	r2, #0
 8003016:	4c06      	ldr	r4, [pc, #24]	; (8003030 <_write_r+0x24>)
 8003018:	6022      	str	r2, [r4, #0]
 800301a:	001a      	movs	r2, r3
 800301c:	f7fd f900 	bl	8000220 <_write>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d103      	bne.n	800302c <_write_r+0x20>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d000      	beq.n	800302c <_write_r+0x20>
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	bd70      	pop	{r4, r5, r6, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	20000410 	.word	0x20000410

08003034 <_close_r>:
 8003034:	2300      	movs	r3, #0
 8003036:	b570      	push	{r4, r5, r6, lr}
 8003038:	4c06      	ldr	r4, [pc, #24]	; (8003054 <_close_r+0x20>)
 800303a:	0005      	movs	r5, r0
 800303c:	0008      	movs	r0, r1
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	f7fd fc15 	bl	800086e <_close>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d103      	bne.n	8003050 <_close_r+0x1c>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d000      	beq.n	8003050 <_close_r+0x1c>
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000410 	.word	0x20000410

08003058 <_fstat_r>:
 8003058:	2300      	movs	r3, #0
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	4c06      	ldr	r4, [pc, #24]	; (8003078 <_fstat_r+0x20>)
 800305e:	0005      	movs	r5, r0
 8003060:	0008      	movs	r0, r1
 8003062:	0011      	movs	r1, r2
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	f7fd fc0c 	bl	8000882 <_fstat>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d103      	bne.n	8003076 <_fstat_r+0x1e>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d000      	beq.n	8003076 <_fstat_r+0x1e>
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	20000410 	.word	0x20000410

0800307c <_isatty_r>:
 800307c:	2300      	movs	r3, #0
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	4c06      	ldr	r4, [pc, #24]	; (800309c <_isatty_r+0x20>)
 8003082:	0005      	movs	r5, r0
 8003084:	0008      	movs	r0, r1
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	f7fd fc09 	bl	800089e <_isatty>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d103      	bne.n	8003098 <_isatty_r+0x1c>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d000      	beq.n	8003098 <_isatty_r+0x1c>
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	20000410 	.word	0x20000410

080030a0 <_lseek_r>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	0005      	movs	r5, r0
 80030a4:	0008      	movs	r0, r1
 80030a6:	0011      	movs	r1, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	4c06      	ldr	r4, [pc, #24]	; (80030c4 <_lseek_r+0x24>)
 80030ac:	6022      	str	r2, [r4, #0]
 80030ae:	001a      	movs	r2, r3
 80030b0:	f7fd fbfe 	bl	80008b0 <_lseek>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d103      	bne.n	80030c0 <_lseek_r+0x20>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d000      	beq.n	80030c0 <_lseek_r+0x20>
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000410 	.word	0x20000410

080030c8 <__malloc_lock>:
 80030c8:	4770      	bx	lr

080030ca <__malloc_unlock>:
 80030ca:	4770      	bx	lr

080030cc <_read_r>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	0005      	movs	r5, r0
 80030d0:	0008      	movs	r0, r1
 80030d2:	0011      	movs	r1, r2
 80030d4:	2200      	movs	r2, #0
 80030d6:	4c06      	ldr	r4, [pc, #24]	; (80030f0 <_read_r+0x24>)
 80030d8:	6022      	str	r2, [r4, #0]
 80030da:	001a      	movs	r2, r3
 80030dc:	f7fd fbaa 	bl	8000834 <_read>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d103      	bne.n	80030ec <_read_r+0x20>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d000      	beq.n	80030ec <_read_r+0x20>
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000410 	.word	0x20000410

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
