
cvic03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000037c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000444  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000444  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000854  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000364  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  000110d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000480e  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000e5d  00000000  00000000  0001594e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001849e  00000000  00000000  000167ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ec49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000134  00000000  00000000  0002ecc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000424 	.word	0x08000424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000424 	.word	0x08000424

08000108 <main>:
#include <stm32f0xx.h>
#include "sct.h"


int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	sct_init();
 800010e:	f000 f8a5 	bl	800025c <sct_init>
	sct_led(0x7A5C36DE);
 8000112:	4b07      	ldr	r3, [pc, #28]	; (8000130 <main+0x28>)
 8000114:	0018      	movs	r0, r3
 8000116:	f000 f8c5 	bl	80002a4 <sct_led>
	for (volatile uint32_t i = 0; i < 300000; i++) {}
 800011a:	2300      	movs	r3, #0
 800011c:	607b      	str	r3, [r7, #4]
 800011e:	e002      	b.n	8000126 <main+0x1e>
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	3301      	adds	r3, #1
 8000124:	607b      	str	r3, [r7, #4]
 8000126:	687b      	ldr	r3, [r7, #4]
 8000128:	4a02      	ldr	r2, [pc, #8]	; (8000134 <main+0x2c>)
 800012a:	4293      	cmp	r3, r2
 800012c:	d9f8      	bls.n	8000120 <main+0x18>

	for(;;){
 800012e:	e7fe      	b.n	800012e <main+0x26>
 8000130:	7a5c36de 	.word	0x7a5c36de
 8000134:	000493df 	.word	0x000493df

08000138 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d932      	bls.n	80001b4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	0019      	movs	r1, r3
 8000156:	230f      	movs	r3, #15
 8000158:	400b      	ands	r3, r1
 800015a:	3b08      	subs	r3, #8
 800015c:	089b      	lsrs	r3, r3, #2
 800015e:	3306      	adds	r3, #6
 8000160:	009b      	lsls	r3, r3, #2
 8000162:	18d3      	adds	r3, r2, r3
 8000164:	3304      	adds	r3, #4
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	1dfa      	adds	r2, r7, #7
 800016a:	7812      	ldrb	r2, [r2, #0]
 800016c:	0011      	movs	r1, r2
 800016e:	2203      	movs	r2, #3
 8000170:	400a      	ands	r2, r1
 8000172:	00d2      	lsls	r2, r2, #3
 8000174:	21ff      	movs	r1, #255	; 0xff
 8000176:	4091      	lsls	r1, r2
 8000178:	000a      	movs	r2, r1
 800017a:	43d2      	mvns	r2, r2
 800017c:	401a      	ands	r2, r3
 800017e:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	019b      	lsls	r3, r3, #6
 8000184:	22ff      	movs	r2, #255	; 0xff
 8000186:	401a      	ands	r2, r3
 8000188:	1dfb      	adds	r3, r7, #7
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	0018      	movs	r0, r3
 800018e:	2303      	movs	r3, #3
 8000190:	4003      	ands	r3, r0
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000196:	481d      	ldr	r0, [pc, #116]	; (800020c <NVIC_SetPriority+0xd4>)
 8000198:	1dfb      	adds	r3, r7, #7
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	001c      	movs	r4, r3
 800019e:	230f      	movs	r3, #15
 80001a0:	4023      	ands	r3, r4
 80001a2:	3b08      	subs	r3, #8
 80001a4:	089b      	lsrs	r3, r3, #2
 80001a6:	430a      	orrs	r2, r1
 80001a8:	3306      	adds	r3, #6
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	18c3      	adds	r3, r0, r3
 80001ae:	3304      	adds	r3, #4
 80001b0:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 80001b2:	e027      	b.n	8000204 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001b4:	4a16      	ldr	r2, [pc, #88]	; (8000210 <NVIC_SetPriority+0xd8>)
 80001b6:	1dfb      	adds	r3, r7, #7
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	b25b      	sxtb	r3, r3
 80001bc:	089b      	lsrs	r3, r3, #2
 80001be:	33c0      	adds	r3, #192	; 0xc0
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	589b      	ldr	r3, [r3, r2]
 80001c4:	1dfa      	adds	r2, r7, #7
 80001c6:	7812      	ldrb	r2, [r2, #0]
 80001c8:	0011      	movs	r1, r2
 80001ca:	2203      	movs	r2, #3
 80001cc:	400a      	ands	r2, r1
 80001ce:	00d2      	lsls	r2, r2, #3
 80001d0:	21ff      	movs	r1, #255	; 0xff
 80001d2:	4091      	lsls	r1, r2
 80001d4:	000a      	movs	r2, r1
 80001d6:	43d2      	mvns	r2, r2
 80001d8:	401a      	ands	r2, r3
 80001da:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	019b      	lsls	r3, r3, #6
 80001e0:	22ff      	movs	r2, #255	; 0xff
 80001e2:	401a      	ands	r2, r3
 80001e4:	1dfb      	adds	r3, r7, #7
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	0018      	movs	r0, r3
 80001ea:	2303      	movs	r3, #3
 80001ec:	4003      	ands	r3, r0
 80001ee:	00db      	lsls	r3, r3, #3
 80001f0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001f2:	4807      	ldr	r0, [pc, #28]	; (8000210 <NVIC_SetPriority+0xd8>)
 80001f4:	1dfb      	adds	r3, r7, #7
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	33c0      	adds	r3, #192	; 0xc0
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	501a      	str	r2, [r3, r0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000ed00 	.word	0xe000ed00
 8000210:	e000e100 	.word	0xe000e100

08000214 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3b01      	subs	r3, #1
 8000220:	4a0c      	ldr	r2, [pc, #48]	; (8000254 <SysTick_Config+0x40>)
 8000222:	4293      	cmp	r3, r2
 8000224:	d901      	bls.n	800022a <SysTick_Config+0x16>
 8000226:	2301      	movs	r3, #1
 8000228:	e010      	b.n	800024c <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <SysTick_Config+0x44>)
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	3a01      	subs	r2, #1
 8000230:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000232:	2301      	movs	r3, #1
 8000234:	425b      	negs	r3, r3
 8000236:	2103      	movs	r1, #3
 8000238:	0018      	movs	r0, r3
 800023a:	f7ff ff7d 	bl	8000138 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <SysTick_Config+0x44>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SysTick_Config+0x44>)
 8000246:	2207      	movs	r2, #7
 8000248:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	00ffffff 	.word	0x00ffffff
 8000258:	e000e010 	.word	0xe000e010

0800025c <sct_init>:
#define sct_sdi(x) do { if (x) GPIOB->BSRR = (1 << 4); else GPIOB->BRR = (1 << 4); } while (0)
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)

void sct_init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	SysTick_Config(8000); // 1ms
 8000260:	23fa      	movs	r3, #250	; 0xfa
 8000262:	015b      	lsls	r3, r3, #5
 8000264:	0018      	movs	r0, r3
 8000266:	f7ff ffd5 	bl	8000214 <SysTick_Config>
	RCC->AHBENR |=  RCC_AHBENR_GPIOBEN ;
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <sct_init+0x3c>)
 800026c:	695a      	ldr	r2, [r3, #20]
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <sct_init+0x3c>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	02c9      	lsls	r1, r1, #11
 8000274:	430a      	orrs	r2, r1
 8000276:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER10_0 ;
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <sct_init+0x40>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <sct_init+0x40>)
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <sct_init+0x44>)
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
	sct_led(0);
 8000284:	2000      	movs	r0, #0
 8000286:	f000 f80d 	bl	80002a4 <sct_led>
	sct_noe(0);
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <sct_init+0x40>)
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	00d2      	lsls	r2, r2, #3
 8000290:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	48000400 	.word	0x48000400
 80002a0:	00100540 	.word	0x00100540

080002a4 <sct_led>:

void sct_led(uint32_t value)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	sct_nla(1);
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <sct_led+0x58>)
 80002ae:	2220      	movs	r2, #32
 80002b0:	619a      	str	r2, [r3, #24]
	for (uint32_t i = 0; i < 32; i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e016      	b.n	80002e6 <sct_led+0x42>
	{
		if (value & 1)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	d003      	beq.n	80002c8 <sct_led+0x24>
		{
			sct_sdi(1);
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <sct_led+0x58>)
 80002c2:	2210      	movs	r2, #16
 80002c4:	619a      	str	r2, [r3, #24]
 80002c6:	e002      	b.n	80002ce <sct_led+0x2a>
		}
		else
		{
			sct_sdi(0);
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <sct_led+0x58>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
		}
		value >>= 1;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	085b      	lsrs	r3, r3, #1
 80002d2:	607b      	str	r3, [r7, #4]

		sct_clk(1);
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <sct_led+0x58>)
 80002d6:	2208      	movs	r2, #8
 80002d8:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <sct_led+0x58>)
 80002dc:	2208      	movs	r2, #8
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++)
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b1f      	cmp	r3, #31
 80002ea:	d9e5      	bls.n	80002b8 <sct_led+0x14>
	}
	sct_nla(0);
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <sct_led+0x58>)
 80002ee:	2220      	movs	r2, #32
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b004      	add	sp, #16
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	48000400 	.word	0x48000400

08000300 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <SystemInit+0x70>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <SystemInit+0x70>)
 800030a:	2101      	movs	r1, #1
 800030c:	430a      	orrs	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <SystemInit+0x70>)
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <SystemInit+0x70>)
 8000316:	4917      	ldr	r1, [pc, #92]	; (8000374 <SystemInit+0x74>)
 8000318:	400a      	ands	r2, r1
 800031a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <SystemInit+0x70>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <SystemInit+0x70>)
 8000322:	4915      	ldr	r1, [pc, #84]	; (8000378 <SystemInit+0x78>)
 8000324:	400a      	ands	r2, r1
 8000326:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <SystemInit+0x70>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <SystemInit+0x70>)
 800032e:	4913      	ldr	r1, [pc, #76]	; (800037c <SystemInit+0x7c>)
 8000330:	400a      	ands	r2, r1
 8000332:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <SystemInit+0x70>)
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <SystemInit+0x70>)
 800033a:	4911      	ldr	r1, [pc, #68]	; (8000380 <SystemInit+0x80>)
 800033c:	400a      	ands	r2, r1
 800033e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <SystemInit+0x70>)
 8000342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <SystemInit+0x70>)
 8000346:	210f      	movs	r1, #15
 8000348:	438a      	bics	r2, r1
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <SystemInit+0x70>)
 800034e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <SystemInit+0x70>)
 8000352:	490c      	ldr	r1, [pc, #48]	; (8000384 <SystemInit+0x84>)
 8000354:	400a      	ands	r2, r1
 8000356:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <SystemInit+0x70>)
 800035a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <SystemInit+0x70>)
 800035e:	2101      	movs	r1, #1
 8000360:	438a      	bics	r2, r1
 8000362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000364:	4b02      	ldr	r3, [pc, #8]	; (8000370 <SystemInit+0x70>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]

}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	08ffb80c 	.word	0x08ffb80c
 8000378:	fef6ffff 	.word	0xfef6ffff
 800037c:	fffbffff 	.word	0xfffbffff
 8000380:	ffc0ffff 	.word	0xffc0ffff
 8000384:	fffffeec 	.word	0xfffffeec

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490e      	ldr	r1, [pc, #56]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0b      	ldr	r4, [pc, #44]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003b2:	f7ff ffa5 	bl	8000300 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff fea5 	bl	8000108 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	2600      	movs	r6, #0
 80003e0:	4d0c      	ldr	r5, [pc, #48]	; (8000414 <__libc_init_array+0x38>)
 80003e2:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	2600      	movs	r6, #0
 80003ee:	f000 f819 	bl	8000424 <_init>
 80003f2:	4d0a      	ldr	r5, [pc, #40]	; (800041c <__libc_init_array+0x40>)
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <__libc_init_array+0x44>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	00b3      	lsls	r3, r6, #2
 8000402:	58eb      	ldr	r3, [r5, r3]
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	00b3      	lsls	r3, r6, #2
 800040c:	58eb      	ldr	r3, [r5, r3]
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
